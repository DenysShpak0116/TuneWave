// Code generated by MockGen. DO NOT EDIT.
// Source: user_reaction_service.go
//
// Generated by this command:
//
//	mockgen -source=user_reaction_service.go -destination=../../service/mocks/user_reaction_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserReactionService is a mock of UserReactionService interface.
type MockUserReactionService struct {
	ctrl     *gomock.Controller
	recorder *MockUserReactionServiceMockRecorder
	isgomock struct{}
}

// MockUserReactionServiceMockRecorder is the mock recorder for MockUserReactionService.
type MockUserReactionServiceMockRecorder struct {
	mock *MockUserReactionService
}

// NewMockUserReactionService creates a new mock instance.
func NewMockUserReactionService(ctrl *gomock.Controller) *MockUserReactionService {
	mock := &MockUserReactionService{ctrl: ctrl}
	mock.recorder = &MockUserReactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReactionService) EXPECT() *MockUserReactionServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockUserReactionService) CountWhere(ctx context.Context, params *models.UserReaction) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockUserReactionServiceMockRecorder) CountWhere(ctx, params any) *MockUserReactionServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockUserReactionService)(nil).CountWhere), ctx, params)
	return &MockUserReactionServiceCountWhereCall{Call: call}
}

// MockUserReactionServiceCountWhereCall wrap *gomock.Call
type MockUserReactionServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockUserReactionServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceCountWhereCall) Do(f func(context.Context, *models.UserReaction) (int64, error)) *MockUserReactionServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.UserReaction) (int64, error)) *MockUserReactionServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockUserReactionService) Create(ctx context.Context, entities ...*models.UserReaction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserReactionServiceMockRecorder) Create(ctx any, entities ...any) *MockUserReactionServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserReactionService)(nil).Create), varargs...)
	return &MockUserReactionServiceCreateCall{Call: call}
}

// MockUserReactionServiceCreateCall wrap *gomock.Call
type MockUserReactionServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceCreateCall) Return(arg0 error) *MockUserReactionServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceCreateCall) Do(f func(context.Context, ...*models.UserReaction) error) *MockUserReactionServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.UserReaction) error) *MockUserReactionServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockUserReactionService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserReactionServiceMockRecorder) Delete(ctx any, id ...any) *MockUserReactionServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserReactionService)(nil).Delete), varargs...)
	return &MockUserReactionServiceDeleteCall{Call: call}
}

// MockUserReactionServiceDeleteCall wrap *gomock.Call
type MockUserReactionServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceDeleteCall) Return(arg0 error) *MockUserReactionServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockUserReactionServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockUserReactionServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockUserReactionService) First(ctx context.Context, params *models.UserReaction, preloads ...string) (*models.UserReaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.UserReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockUserReactionServiceMockRecorder) First(ctx, params any, preloads ...any) *MockUserReactionServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockUserReactionService)(nil).First), varargs...)
	return &MockUserReactionServiceFirstCall{Call: call}
}

// MockUserReactionServiceFirstCall wrap *gomock.Call
type MockUserReactionServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceFirstCall) Return(arg0 *models.UserReaction, arg1 error) *MockUserReactionServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceFirstCall) Do(f func(context.Context, *models.UserReaction, ...string) (*models.UserReaction, error)) *MockUserReactionServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceFirstCall) DoAndReturn(f func(context.Context, *models.UserReaction, ...string) (*models.UserReaction, error)) *MockUserReactionServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockUserReactionService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.UserReaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.UserReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserReactionServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockUserReactionServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserReactionService)(nil).GetByID), varargs...)
	return &MockUserReactionServiceGetByIDCall{Call: call}
}

// MockUserReactionServiceGetByIDCall wrap *gomock.Call
type MockUserReactionServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceGetByIDCall) Return(arg0 *models.UserReaction, arg1 error) *MockUserReactionServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.UserReaction, error)) *MockUserReactionServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.UserReaction, error)) *MockUserReactionServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSongDislikes mocks base method.
func (m *MockUserReactionService) GetSongDislikes(ctx context.Context, songID uuid.UUID) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongDislikes", ctx, songID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetSongDislikes indicates an expected call of GetSongDislikes.
func (mr *MockUserReactionServiceMockRecorder) GetSongDislikes(ctx, songID any) *MockUserReactionServiceGetSongDislikesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongDislikes", reflect.TypeOf((*MockUserReactionService)(nil).GetSongDislikes), ctx, songID)
	return &MockUserReactionServiceGetSongDislikesCall{Call: call}
}

// MockUserReactionServiceGetSongDislikesCall wrap *gomock.Call
type MockUserReactionServiceGetSongDislikesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceGetSongDislikesCall) Return(arg0 int64) *MockUserReactionServiceGetSongDislikesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceGetSongDislikesCall) Do(f func(context.Context, uuid.UUID) int64) *MockUserReactionServiceGetSongDislikesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceGetSongDislikesCall) DoAndReturn(f func(context.Context, uuid.UUID) int64) *MockUserReactionServiceGetSongDislikesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSongLikes mocks base method.
func (m *MockUserReactionService) GetSongLikes(ctx context.Context, songID uuid.UUID) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongLikes", ctx, songID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetSongLikes indicates an expected call of GetSongLikes.
func (mr *MockUserReactionServiceMockRecorder) GetSongLikes(ctx, songID any) *MockUserReactionServiceGetSongLikesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongLikes", reflect.TypeOf((*MockUserReactionService)(nil).GetSongLikes), ctx, songID)
	return &MockUserReactionServiceGetSongLikesCall{Call: call}
}

// MockUserReactionServiceGetSongLikesCall wrap *gomock.Call
type MockUserReactionServiceGetSongLikesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceGetSongLikesCall) Return(arg0 int64) *MockUserReactionServiceGetSongLikesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceGetSongLikesCall) Do(f func(context.Context, uuid.UUID) int64) *MockUserReactionServiceGetSongLikesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceGetSongLikesCall) DoAndReturn(f func(context.Context, uuid.UUID) int64) *MockUserReactionServiceGetSongLikesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockUserReactionService) Last(ctx context.Context, params *models.UserReaction, preloads ...string) (*models.UserReaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.UserReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockUserReactionServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockUserReactionServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockUserReactionService)(nil).Last), varargs...)
	return &MockUserReactionServiceLastCall{Call: call}
}

// MockUserReactionServiceLastCall wrap *gomock.Call
type MockUserReactionServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceLastCall) Return(arg0 *models.UserReaction, arg1 error) *MockUserReactionServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceLastCall) Do(f func(context.Context, *models.UserReaction, ...string) (*models.UserReaction, error)) *MockUserReactionServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceLastCall) DoAndReturn(f func(context.Context, *models.UserReaction, ...string) (*models.UserReaction, error)) *MockUserReactionServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockUserReactionService) Update(ctx context.Context, entity *models.UserReaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserReactionServiceMockRecorder) Update(ctx, entity any) *MockUserReactionServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserReactionService)(nil).Update), ctx, entity)
	return &MockUserReactionServiceUpdateCall{Call: call}
}

// MockUserReactionServiceUpdateCall wrap *gomock.Call
type MockUserReactionServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceUpdateCall) Return(arg0 error) *MockUserReactionServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceUpdateCall) Do(f func(context.Context, *models.UserReaction) error) *MockUserReactionServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceUpdateCall) DoAndReturn(f func(context.Context, *models.UserReaction) error) *MockUserReactionServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockUserReactionService) Where(ctx context.Context, params *models.UserReaction, opts ...query.Option) ([]models.UserReaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.UserReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockUserReactionServiceMockRecorder) Where(ctx, params any, opts ...any) *MockUserReactionServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockUserReactionService)(nil).Where), varargs...)
	return &MockUserReactionServiceWhereCall{Call: call}
}

// MockUserReactionServiceWhereCall wrap *gomock.Call
type MockUserReactionServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserReactionServiceWhereCall) Return(arg0 []models.UserReaction, arg1 error) *MockUserReactionServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserReactionServiceWhereCall) Do(f func(context.Context, *models.UserReaction, ...query.Option) ([]models.UserReaction, error)) *MockUserReactionServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserReactionServiceWhereCall) DoAndReturn(f func(context.Context, *models.UserReaction, ...query.Option) ([]models.UserReaction, error)) *MockUserReactionServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
