// Code generated by MockGen. DO NOT EDIT.
// Source: user_collection_service.go
//
// Generated by this command:
//
//	mockgen -source=user_collection_service.go -destination=../../service/mocks/user_collection_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserCollectionService is a mock of UserCollectionService interface.
type MockUserCollectionService struct {
	ctrl     *gomock.Controller
	recorder *MockUserCollectionServiceMockRecorder
	isgomock struct{}
}

// MockUserCollectionServiceMockRecorder is the mock recorder for MockUserCollectionService.
type MockUserCollectionServiceMockRecorder struct {
	mock *MockUserCollectionService
}

// NewMockUserCollectionService creates a new mock instance.
func NewMockUserCollectionService(ctrl *gomock.Controller) *MockUserCollectionService {
	mock := &MockUserCollectionService{ctrl: ctrl}
	mock.recorder = &MockUserCollectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCollectionService) EXPECT() *MockUserCollectionServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockUserCollectionService) CountWhere(ctx context.Context, params *models.UserCollection) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockUserCollectionServiceMockRecorder) CountWhere(ctx, params any) *MockUserCollectionServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockUserCollectionService)(nil).CountWhere), ctx, params)
	return &MockUserCollectionServiceCountWhereCall{Call: call}
}

// MockUserCollectionServiceCountWhereCall wrap *gomock.Call
type MockUserCollectionServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCollectionServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockUserCollectionServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCollectionServiceCountWhereCall) Do(f func(context.Context, *models.UserCollection) (int64, error)) *MockUserCollectionServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCollectionServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.UserCollection) (int64, error)) *MockUserCollectionServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockUserCollectionService) Create(ctx context.Context, entities ...*models.UserCollection) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserCollectionServiceMockRecorder) Create(ctx any, entities ...any) *MockUserCollectionServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserCollectionService)(nil).Create), varargs...)
	return &MockUserCollectionServiceCreateCall{Call: call}
}

// MockUserCollectionServiceCreateCall wrap *gomock.Call
type MockUserCollectionServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCollectionServiceCreateCall) Return(arg0 error) *MockUserCollectionServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCollectionServiceCreateCall) Do(f func(context.Context, ...*models.UserCollection) error) *MockUserCollectionServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCollectionServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.UserCollection) error) *MockUserCollectionServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockUserCollectionService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserCollectionServiceMockRecorder) Delete(ctx any, id ...any) *MockUserCollectionServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserCollectionService)(nil).Delete), varargs...)
	return &MockUserCollectionServiceDeleteCall{Call: call}
}

// MockUserCollectionServiceDeleteCall wrap *gomock.Call
type MockUserCollectionServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCollectionServiceDeleteCall) Return(arg0 error) *MockUserCollectionServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCollectionServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockUserCollectionServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCollectionServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockUserCollectionServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockUserCollectionService) First(ctx context.Context, params *models.UserCollection, preloads ...string) (*models.UserCollection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.UserCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockUserCollectionServiceMockRecorder) First(ctx, params any, preloads ...any) *MockUserCollectionServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockUserCollectionService)(nil).First), varargs...)
	return &MockUserCollectionServiceFirstCall{Call: call}
}

// MockUserCollectionServiceFirstCall wrap *gomock.Call
type MockUserCollectionServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCollectionServiceFirstCall) Return(arg0 *models.UserCollection, arg1 error) *MockUserCollectionServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCollectionServiceFirstCall) Do(f func(context.Context, *models.UserCollection, ...string) (*models.UserCollection, error)) *MockUserCollectionServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCollectionServiceFirstCall) DoAndReturn(f func(context.Context, *models.UserCollection, ...string) (*models.UserCollection, error)) *MockUserCollectionServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockUserCollectionService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.UserCollection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.UserCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserCollectionServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockUserCollectionServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserCollectionService)(nil).GetByID), varargs...)
	return &MockUserCollectionServiceGetByIDCall{Call: call}
}

// MockUserCollectionServiceGetByIDCall wrap *gomock.Call
type MockUserCollectionServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCollectionServiceGetByIDCall) Return(arg0 *models.UserCollection, arg1 error) *MockUserCollectionServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCollectionServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.UserCollection, error)) *MockUserCollectionServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCollectionServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.UserCollection, error)) *MockUserCollectionServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockUserCollectionService) Last(ctx context.Context, params *models.UserCollection, preloads ...string) (*models.UserCollection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.UserCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockUserCollectionServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockUserCollectionServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockUserCollectionService)(nil).Last), varargs...)
	return &MockUserCollectionServiceLastCall{Call: call}
}

// MockUserCollectionServiceLastCall wrap *gomock.Call
type MockUserCollectionServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCollectionServiceLastCall) Return(arg0 *models.UserCollection, arg1 error) *MockUserCollectionServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCollectionServiceLastCall) Do(f func(context.Context, *models.UserCollection, ...string) (*models.UserCollection, error)) *MockUserCollectionServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCollectionServiceLastCall) DoAndReturn(f func(context.Context, *models.UserCollection, ...string) (*models.UserCollection, error)) *MockUserCollectionServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockUserCollectionService) Update(ctx context.Context, entity *models.UserCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserCollectionServiceMockRecorder) Update(ctx, entity any) *MockUserCollectionServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserCollectionService)(nil).Update), ctx, entity)
	return &MockUserCollectionServiceUpdateCall{Call: call}
}

// MockUserCollectionServiceUpdateCall wrap *gomock.Call
type MockUserCollectionServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCollectionServiceUpdateCall) Return(arg0 error) *MockUserCollectionServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCollectionServiceUpdateCall) Do(f func(context.Context, *models.UserCollection) error) *MockUserCollectionServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCollectionServiceUpdateCall) DoAndReturn(f func(context.Context, *models.UserCollection) error) *MockUserCollectionServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockUserCollectionService) Where(ctx context.Context, params *models.UserCollection, opts ...query.Option) ([]models.UserCollection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.UserCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockUserCollectionServiceMockRecorder) Where(ctx, params any, opts ...any) *MockUserCollectionServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockUserCollectionService)(nil).Where), varargs...)
	return &MockUserCollectionServiceWhereCall{Call: call}
}

// MockUserCollectionServiceWhereCall wrap *gomock.Call
type MockUserCollectionServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCollectionServiceWhereCall) Return(arg0 []models.UserCollection, arg1 error) *MockUserCollectionServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCollectionServiceWhereCall) Do(f func(context.Context, *models.UserCollection, ...query.Option) ([]models.UserCollection, error)) *MockUserCollectionServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCollectionServiceWhereCall) DoAndReturn(f func(context.Context, *models.UserCollection, ...query.Option) ([]models.UserCollection, error)) *MockUserCollectionServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
