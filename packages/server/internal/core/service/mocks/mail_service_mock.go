// Code generated by MockGen. DO NOT EDIT.
// Source: mail_service.go
//
// Generated by this command:
//
//	mockgen -source=mail_service.go -destination=../../service/mocks/mail_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailService is a mock of MailService interface.
type MockMailService struct {
	ctrl     *gomock.Controller
	recorder *MockMailServiceMockRecorder
	isgomock struct{}
}

// MockMailServiceMockRecorder is the mock recorder for MockMailService.
type MockMailServiceMockRecorder struct {
	mock *MockMailService
}

// NewMockMailService creates a new mock instance.
func NewMockMailService(ctrl *gomock.Controller) *MockMailService {
	mock := &MockMailService{ctrl: ctrl}
	mock.recorder = &MockMailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailService) EXPECT() *MockMailServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockMailService) SendEmail(to, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockMailServiceMockRecorder) SendEmail(to, subject, body any) *MockMailServiceSendEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockMailService)(nil).SendEmail), to, subject, body)
	return &MockMailServiceSendEmailCall{Call: call}
}

// MockMailServiceSendEmailCall wrap *gomock.Call
type MockMailServiceSendEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMailServiceSendEmailCall) Return(arg0 error) *MockMailServiceSendEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMailServiceSendEmailCall) Do(f func(string, string, string) error) *MockMailServiceSendEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMailServiceSendEmailCall) DoAndReturn(f func(string, string, string) error) *MockMailServiceSendEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
