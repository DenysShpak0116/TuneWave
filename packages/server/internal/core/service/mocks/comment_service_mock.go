// Code generated by MockGen. DO NOT EDIT.
// Source: comment_service.go
//
// Generated by this command:
//
//	mockgen -source=comment_service.go -destination=../../service/mocks/comment_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
	isgomock struct{}
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockCommentService) CountWhere(ctx context.Context, params *models.Comment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockCommentServiceMockRecorder) CountWhere(ctx, params any) *MockCommentServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockCommentService)(nil).CountWhere), ctx, params)
	return &MockCommentServiceCountWhereCall{Call: call}
}

// MockCommentServiceCountWhereCall wrap *gomock.Call
type MockCommentServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommentServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockCommentServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommentServiceCountWhereCall) Do(f func(context.Context, *models.Comment) (int64, error)) *MockCommentServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommentServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.Comment) (int64, error)) *MockCommentServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockCommentService) Create(ctx context.Context, entities ...*models.Comment) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCommentServiceMockRecorder) Create(ctx any, entities ...any) *MockCommentServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentService)(nil).Create), varargs...)
	return &MockCommentServiceCreateCall{Call: call}
}

// MockCommentServiceCreateCall wrap *gomock.Call
type MockCommentServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommentServiceCreateCall) Return(arg0 error) *MockCommentServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommentServiceCreateCall) Do(f func(context.Context, ...*models.Comment) error) *MockCommentServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommentServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.Comment) error) *MockCommentServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockCommentService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentServiceMockRecorder) Delete(ctx any, id ...any) *MockCommentServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentService)(nil).Delete), varargs...)
	return &MockCommentServiceDeleteCall{Call: call}
}

// MockCommentServiceDeleteCall wrap *gomock.Call
type MockCommentServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommentServiceDeleteCall) Return(arg0 error) *MockCommentServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommentServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockCommentServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommentServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockCommentServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockCommentService) First(ctx context.Context, params *models.Comment, preloads ...string) (*models.Comment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockCommentServiceMockRecorder) First(ctx, params any, preloads ...any) *MockCommentServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockCommentService)(nil).First), varargs...)
	return &MockCommentServiceFirstCall{Call: call}
}

// MockCommentServiceFirstCall wrap *gomock.Call
type MockCommentServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommentServiceFirstCall) Return(arg0 *models.Comment, arg1 error) *MockCommentServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommentServiceFirstCall) Do(f func(context.Context, *models.Comment, ...string) (*models.Comment, error)) *MockCommentServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommentServiceFirstCall) DoAndReturn(f func(context.Context, *models.Comment, ...string) (*models.Comment, error)) *MockCommentServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockCommentService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.Comment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCommentServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockCommentServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCommentService)(nil).GetByID), varargs...)
	return &MockCommentServiceGetByIDCall{Call: call}
}

// MockCommentServiceGetByIDCall wrap *gomock.Call
type MockCommentServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommentServiceGetByIDCall) Return(arg0 *models.Comment, arg1 error) *MockCommentServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommentServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.Comment, error)) *MockCommentServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommentServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.Comment, error)) *MockCommentServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockCommentService) Last(ctx context.Context, params *models.Comment, preloads ...string) (*models.Comment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockCommentServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockCommentServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockCommentService)(nil).Last), varargs...)
	return &MockCommentServiceLastCall{Call: call}
}

// MockCommentServiceLastCall wrap *gomock.Call
type MockCommentServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommentServiceLastCall) Return(arg0 *models.Comment, arg1 error) *MockCommentServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommentServiceLastCall) Do(f func(context.Context, *models.Comment, ...string) (*models.Comment, error)) *MockCommentServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommentServiceLastCall) DoAndReturn(f func(context.Context, *models.Comment, ...string) (*models.Comment, error)) *MockCommentServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockCommentService) Update(ctx context.Context, entity *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCommentServiceMockRecorder) Update(ctx, entity any) *MockCommentServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentService)(nil).Update), ctx, entity)
	return &MockCommentServiceUpdateCall{Call: call}
}

// MockCommentServiceUpdateCall wrap *gomock.Call
type MockCommentServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommentServiceUpdateCall) Return(arg0 error) *MockCommentServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommentServiceUpdateCall) Do(f func(context.Context, *models.Comment) error) *MockCommentServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommentServiceUpdateCall) DoAndReturn(f func(context.Context, *models.Comment) error) *MockCommentServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockCommentService) Where(ctx context.Context, params *models.Comment, opts ...query.Option) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockCommentServiceMockRecorder) Where(ctx, params any, opts ...any) *MockCommentServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockCommentService)(nil).Where), varargs...)
	return &MockCommentServiceWhereCall{Call: call}
}

// MockCommentServiceWhereCall wrap *gomock.Call
type MockCommentServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommentServiceWhereCall) Return(arg0 []models.Comment, arg1 error) *MockCommentServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommentServiceWhereCall) Do(f func(context.Context, *models.Comment, ...query.Option) ([]models.Comment, error)) *MockCommentServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommentServiceWhereCall) DoAndReturn(f func(context.Context, *models.Comment, ...query.Option) ([]models.Comment, error)) *MockCommentServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
