// Code generated by MockGen. DO NOT EDIT.
// Source: criterion_service.go
//
// Generated by this command:
//
//	mockgen -source=criterion_service.go -destination=../../service/mocks/criterion_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCriterionService is a mock of CriterionService interface.
type MockCriterionService struct {
	ctrl     *gomock.Controller
	recorder *MockCriterionServiceMockRecorder
	isgomock struct{}
}

// MockCriterionServiceMockRecorder is the mock recorder for MockCriterionService.
type MockCriterionServiceMockRecorder struct {
	mock *MockCriterionService
}

// NewMockCriterionService creates a new mock instance.
func NewMockCriterionService(ctrl *gomock.Controller) *MockCriterionService {
	mock := &MockCriterionService{ctrl: ctrl}
	mock.recorder = &MockCriterionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCriterionService) EXPECT() *MockCriterionServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockCriterionService) CountWhere(ctx context.Context, params *models.Criterion) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockCriterionServiceMockRecorder) CountWhere(ctx, params any) *MockCriterionServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockCriterionService)(nil).CountWhere), ctx, params)
	return &MockCriterionServiceCountWhereCall{Call: call}
}

// MockCriterionServiceCountWhereCall wrap *gomock.Call
type MockCriterionServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCriterionServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockCriterionServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCriterionServiceCountWhereCall) Do(f func(context.Context, *models.Criterion) (int64, error)) *MockCriterionServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCriterionServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.Criterion) (int64, error)) *MockCriterionServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockCriterionService) Create(ctx context.Context, entities ...*models.Criterion) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCriterionServiceMockRecorder) Create(ctx any, entities ...any) *MockCriterionServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCriterionService)(nil).Create), varargs...)
	return &MockCriterionServiceCreateCall{Call: call}
}

// MockCriterionServiceCreateCall wrap *gomock.Call
type MockCriterionServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCriterionServiceCreateCall) Return(arg0 error) *MockCriterionServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCriterionServiceCreateCall) Do(f func(context.Context, ...*models.Criterion) error) *MockCriterionServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCriterionServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.Criterion) error) *MockCriterionServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockCriterionService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCriterionServiceMockRecorder) Delete(ctx any, id ...any) *MockCriterionServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCriterionService)(nil).Delete), varargs...)
	return &MockCriterionServiceDeleteCall{Call: call}
}

// MockCriterionServiceDeleteCall wrap *gomock.Call
type MockCriterionServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCriterionServiceDeleteCall) Return(arg0 error) *MockCriterionServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCriterionServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockCriterionServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCriterionServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockCriterionServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockCriterionService) First(ctx context.Context, params *models.Criterion, preloads ...string) (*models.Criterion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.Criterion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockCriterionServiceMockRecorder) First(ctx, params any, preloads ...any) *MockCriterionServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockCriterionService)(nil).First), varargs...)
	return &MockCriterionServiceFirstCall{Call: call}
}

// MockCriterionServiceFirstCall wrap *gomock.Call
type MockCriterionServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCriterionServiceFirstCall) Return(arg0 *models.Criterion, arg1 error) *MockCriterionServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCriterionServiceFirstCall) Do(f func(context.Context, *models.Criterion, ...string) (*models.Criterion, error)) *MockCriterionServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCriterionServiceFirstCall) DoAndReturn(f func(context.Context, *models.Criterion, ...string) (*models.Criterion, error)) *MockCriterionServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockCriterionService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.Criterion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.Criterion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCriterionServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockCriterionServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCriterionService)(nil).GetByID), varargs...)
	return &MockCriterionServiceGetByIDCall{Call: call}
}

// MockCriterionServiceGetByIDCall wrap *gomock.Call
type MockCriterionServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCriterionServiceGetByIDCall) Return(arg0 *models.Criterion, arg1 error) *MockCriterionServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCriterionServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.Criterion, error)) *MockCriterionServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCriterionServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.Criterion, error)) *MockCriterionServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockCriterionService) Last(ctx context.Context, params *models.Criterion, preloads ...string) (*models.Criterion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.Criterion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockCriterionServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockCriterionServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockCriterionService)(nil).Last), varargs...)
	return &MockCriterionServiceLastCall{Call: call}
}

// MockCriterionServiceLastCall wrap *gomock.Call
type MockCriterionServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCriterionServiceLastCall) Return(arg0 *models.Criterion, arg1 error) *MockCriterionServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCriterionServiceLastCall) Do(f func(context.Context, *models.Criterion, ...string) (*models.Criterion, error)) *MockCriterionServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCriterionServiceLastCall) DoAndReturn(f func(context.Context, *models.Criterion, ...string) (*models.Criterion, error)) *MockCriterionServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockCriterionService) Update(ctx context.Context, entity *models.Criterion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCriterionServiceMockRecorder) Update(ctx, entity any) *MockCriterionServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCriterionService)(nil).Update), ctx, entity)
	return &MockCriterionServiceUpdateCall{Call: call}
}

// MockCriterionServiceUpdateCall wrap *gomock.Call
type MockCriterionServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCriterionServiceUpdateCall) Return(arg0 error) *MockCriterionServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCriterionServiceUpdateCall) Do(f func(context.Context, *models.Criterion) error) *MockCriterionServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCriterionServiceUpdateCall) DoAndReturn(f func(context.Context, *models.Criterion) error) *MockCriterionServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockCriterionService) Where(ctx context.Context, params *models.Criterion, opts ...query.Option) ([]models.Criterion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.Criterion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockCriterionServiceMockRecorder) Where(ctx, params any, opts ...any) *MockCriterionServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockCriterionService)(nil).Where), varargs...)
	return &MockCriterionServiceWhereCall{Call: call}
}

// MockCriterionServiceWhereCall wrap *gomock.Call
type MockCriterionServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCriterionServiceWhereCall) Return(arg0 []models.Criterion, arg1 error) *MockCriterionServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCriterionServiceWhereCall) Do(f func(context.Context, *models.Criterion, ...query.Option) ([]models.Criterion, error)) *MockCriterionServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCriterionServiceWhereCall) DoAndReturn(f func(context.Context, *models.Criterion, ...query.Option) ([]models.Criterion, error)) *MockCriterionServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
