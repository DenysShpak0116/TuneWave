// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service.go
//
// Generated by this command:
//
//	mockgen -source=auth_service.go -destination=../../service/mocks/auth_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/DenysShpak0116/TuneWave/packages/server/internal/adapter/httpserver/handlers/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// HandleForgotPassword mocks base method.
func (m *MockAuthService) HandleForgotPassword(req dto.ForgotPasswordRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleForgotPassword", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleForgotPassword indicates an expected call of HandleForgotPassword.
func (mr *MockAuthServiceMockRecorder) HandleForgotPassword(req any) *MockAuthServiceHandleForgotPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleForgotPassword", reflect.TypeOf((*MockAuthService)(nil).HandleForgotPassword), req)
	return &MockAuthServiceHandleForgotPasswordCall{Call: call}
}

// MockAuthServiceHandleForgotPasswordCall wrap *gomock.Call
type MockAuthServiceHandleForgotPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthServiceHandleForgotPasswordCall) Return(arg0 string, arg1 error) *MockAuthServiceHandleForgotPasswordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthServiceHandleForgotPasswordCall) Do(f func(dto.ForgotPasswordRequest) (string, error)) *MockAuthServiceHandleForgotPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthServiceHandleForgotPasswordCall) DoAndReturn(f func(dto.ForgotPasswordRequest) (string, error)) *MockAuthServiceHandleForgotPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleResetPassword mocks base method.
func (m *MockAuthService) HandleResetPassword(req dto.ResetPasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleResetPassword", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleResetPassword indicates an expected call of HandleResetPassword.
func (mr *MockAuthServiceMockRecorder) HandleResetPassword(req any) *MockAuthServiceHandleResetPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleResetPassword", reflect.TypeOf((*MockAuthService)(nil).HandleResetPassword), req)
	return &MockAuthServiceHandleResetPasswordCall{Call: call}
}

// MockAuthServiceHandleResetPasswordCall wrap *gomock.Call
type MockAuthServiceHandleResetPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthServiceHandleResetPasswordCall) Return(arg0 error) *MockAuthServiceHandleResetPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthServiceHandleResetPasswordCall) Do(f func(dto.ResetPasswordRequest) error) *MockAuthServiceHandleResetPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthServiceHandleResetPasswordCall) DoAndReturn(f func(dto.ResetPasswordRequest) error) *MockAuthServiceHandleResetPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
