// Code generated by MockGen. DO NOT EDIT.
// Source: result_service.go
//
// Generated by this command:
//
//	mockgen -source=result_service.go -destination=../../service/mocks/result_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/DenysShpak0116/TuneWave/packages/server/internal/adapter/httpserver/handlers/dto"
	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockResultService is a mock of ResultService interface.
type MockResultService struct {
	ctrl     *gomock.Controller
	recorder *MockResultServiceMockRecorder
	isgomock struct{}
}

// MockResultServiceMockRecorder is the mock recorder for MockResultService.
type MockResultServiceMockRecorder struct {
	mock *MockResultService
}

// NewMockResultService creates a new mock instance.
func NewMockResultService(ctrl *gomock.Controller) *MockResultService {
	mock := &MockResultService{ctrl: ctrl}
	mock.recorder = &MockResultServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultService) EXPECT() *MockResultServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockResultService) CountWhere(ctx context.Context, params *models.Result) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockResultServiceMockRecorder) CountWhere(ctx, params any) *MockResultServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockResultService)(nil).CountWhere), ctx, params)
	return &MockResultServiceCountWhereCall{Call: call}
}

// MockResultServiceCountWhereCall wrap *gomock.Call
type MockResultServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockResultServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceCountWhereCall) Do(f func(context.Context, *models.Result) (int64, error)) *MockResultServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.Result) (int64, error)) *MockResultServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockResultService) Create(ctx context.Context, entities ...*models.Result) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockResultServiceMockRecorder) Create(ctx any, entities ...any) *MockResultServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResultService)(nil).Create), varargs...)
	return &MockResultServiceCreateCall{Call: call}
}

// MockResultServiceCreateCall wrap *gomock.Call
type MockResultServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceCreateCall) Return(arg0 error) *MockResultServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceCreateCall) Do(f func(context.Context, ...*models.Result) error) *MockResultServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.Result) error) *MockResultServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockResultService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResultServiceMockRecorder) Delete(ctx any, id ...any) *MockResultServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResultService)(nil).Delete), varargs...)
	return &MockResultServiceDeleteCall{Call: call}
}

// MockResultServiceDeleteCall wrap *gomock.Call
type MockResultServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceDeleteCall) Return(arg0 error) *MockResultServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockResultServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockResultServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockResultService) First(ctx context.Context, params *models.Result, preloads ...string) (*models.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockResultServiceMockRecorder) First(ctx, params any, preloads ...any) *MockResultServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockResultService)(nil).First), varargs...)
	return &MockResultServiceFirstCall{Call: call}
}

// MockResultServiceFirstCall wrap *gomock.Call
type MockResultServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceFirstCall) Return(arg0 *models.Result, arg1 error) *MockResultServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceFirstCall) Do(f func(context.Context, *models.Result, ...string) (*models.Result, error)) *MockResultServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceFirstCall) DoAndReturn(f func(context.Context, *models.Result, ...string) (*models.Result, error)) *MockResultServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockResultService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockResultServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockResultServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockResultService)(nil).GetByID), varargs...)
	return &MockResultServiceGetByIDCall{Call: call}
}

// MockResultServiceGetByIDCall wrap *gomock.Call
type MockResultServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceGetByIDCall) Return(arg0 *models.Result, arg1 error) *MockResultServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.Result, error)) *MockResultServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.Result, error)) *MockResultServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCollectiveResults mocks base method.
func (m *MockResultService) GetCollectiveResults(ctx context.Context, collectionID uuid.UUID) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectiveResults", ctx, collectionID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectiveResults indicates an expected call of GetCollectiveResults.
func (mr *MockResultServiceMockRecorder) GetCollectiveResults(ctx, collectionID any) *MockResultServiceGetCollectiveResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectiveResults", reflect.TypeOf((*MockResultService)(nil).GetCollectiveResults), ctx, collectionID)
	return &MockResultServiceGetCollectiveResultsCall{Call: call}
}

// MockResultServiceGetCollectiveResultsCall wrap *gomock.Call
type MockResultServiceGetCollectiveResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceGetCollectiveResultsCall) Return(arg0 map[string]any, arg1 error) *MockResultServiceGetCollectiveResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceGetCollectiveResultsCall) Do(f func(context.Context, uuid.UUID) (map[string]any, error)) *MockResultServiceGetCollectiveResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceGetCollectiveResultsCall) DoAndReturn(f func(context.Context, uuid.UUID) (map[string]any, error)) *MockResultServiceGetCollectiveResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserResults mocks base method.
func (m *MockResultService) GetUserResults(ctx context.Context, userID, collectionID uuid.UUID) ([]models.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserResults", ctx, userID, collectionID)
	ret0, _ := ret[0].([]models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserResults indicates an expected call of GetUserResults.
func (mr *MockResultServiceMockRecorder) GetUserResults(ctx, userID, collectionID any) *MockResultServiceGetUserResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserResults", reflect.TypeOf((*MockResultService)(nil).GetUserResults), ctx, userID, collectionID)
	return &MockResultServiceGetUserResultsCall{Call: call}
}

// MockResultServiceGetUserResultsCall wrap *gomock.Call
type MockResultServiceGetUserResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceGetUserResultsCall) Return(arg0 []models.Result, arg1 error) *MockResultServiceGetUserResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceGetUserResultsCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) ([]models.Result, error)) *MockResultServiceGetUserResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceGetUserResultsCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) ([]models.Result, error)) *MockResultServiceGetUserResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockResultService) Last(ctx context.Context, params *models.Result, preloads ...string) (*models.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockResultServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockResultServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockResultService)(nil).Last), varargs...)
	return &MockResultServiceLastCall{Call: call}
}

// MockResultServiceLastCall wrap *gomock.Call
type MockResultServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceLastCall) Return(arg0 *models.Result, arg1 error) *MockResultServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceLastCall) Do(f func(context.Context, *models.Result, ...string) (*models.Result, error)) *MockResultServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceLastCall) DoAndReturn(f func(context.Context, *models.Result, ...string) (*models.Result, error)) *MockResultServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProcessUserResults mocks base method.
func (m *MockResultService) ProcessUserResults(ctx context.Context, userID, collectionID uuid.UUID, request dto.SendResultRequest) ([]models.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessUserResults", ctx, userID, collectionID, request)
	ret0, _ := ret[0].([]models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessUserResults indicates an expected call of ProcessUserResults.
func (mr *MockResultServiceMockRecorder) ProcessUserResults(ctx, userID, collectionID, request any) *MockResultServiceProcessUserResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessUserResults", reflect.TypeOf((*MockResultService)(nil).ProcessUserResults), ctx, userID, collectionID, request)
	return &MockResultServiceProcessUserResultsCall{Call: call}
}

// MockResultServiceProcessUserResultsCall wrap *gomock.Call
type MockResultServiceProcessUserResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceProcessUserResultsCall) Return(arg0 []models.Result, arg1 error) *MockResultServiceProcessUserResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceProcessUserResultsCall) Do(f func(context.Context, uuid.UUID, uuid.UUID, dto.SendResultRequest) ([]models.Result, error)) *MockResultServiceProcessUserResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceProcessUserResultsCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID, dto.SendResultRequest) ([]models.Result, error)) *MockResultServiceProcessUserResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockResultService) Update(ctx context.Context, entity *models.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockResultServiceMockRecorder) Update(ctx, entity any) *MockResultServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResultService)(nil).Update), ctx, entity)
	return &MockResultServiceUpdateCall{Call: call}
}

// MockResultServiceUpdateCall wrap *gomock.Call
type MockResultServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceUpdateCall) Return(arg0 error) *MockResultServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceUpdateCall) Do(f func(context.Context, *models.Result) error) *MockResultServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceUpdateCall) DoAndReturn(f func(context.Context, *models.Result) error) *MockResultServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockResultService) Where(ctx context.Context, params *models.Result, opts ...query.Option) ([]models.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockResultServiceMockRecorder) Where(ctx, params any, opts ...any) *MockResultServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockResultService)(nil).Where), varargs...)
	return &MockResultServiceWhereCall{Call: call}
}

// MockResultServiceWhereCall wrap *gomock.Call
type MockResultServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultServiceWhereCall) Return(arg0 []models.Result, arg1 error) *MockResultServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultServiceWhereCall) Do(f func(context.Context, *models.Result, ...query.Option) ([]models.Result, error)) *MockResultServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultServiceWhereCall) DoAndReturn(f func(context.Context, *models.Result, ...query.Option) ([]models.Result, error)) *MockResultServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
