// Code generated by MockGen. DO NOT EDIT.
// Source: collection_song_service.go
//
// Generated by this command:
//
//	mockgen -source=collection_song_service.go -destination=../../service/mocks/collection_song_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectionSongService is a mock of CollectionSongService interface.
type MockCollectionSongService struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionSongServiceMockRecorder
	isgomock struct{}
}

// MockCollectionSongServiceMockRecorder is the mock recorder for MockCollectionSongService.
type MockCollectionSongServiceMockRecorder struct {
	mock *MockCollectionSongService
}

// NewMockCollectionSongService creates a new mock instance.
func NewMockCollectionSongService(ctrl *gomock.Controller) *MockCollectionSongService {
	mock := &MockCollectionSongService{ctrl: ctrl}
	mock.recorder = &MockCollectionSongServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionSongService) EXPECT() *MockCollectionSongServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockCollectionSongService) CountWhere(ctx context.Context, params *models.CollectionSong) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockCollectionSongServiceMockRecorder) CountWhere(ctx, params any) *MockCollectionSongServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockCollectionSongService)(nil).CountWhere), ctx, params)
	return &MockCollectionSongServiceCountWhereCall{Call: call}
}

// MockCollectionSongServiceCountWhereCall wrap *gomock.Call
type MockCollectionSongServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionSongServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockCollectionSongServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionSongServiceCountWhereCall) Do(f func(context.Context, *models.CollectionSong) (int64, error)) *MockCollectionSongServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionSongServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.CollectionSong) (int64, error)) *MockCollectionSongServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockCollectionSongService) Create(ctx context.Context, entities ...*models.CollectionSong) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCollectionSongServiceMockRecorder) Create(ctx any, entities ...any) *MockCollectionSongServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCollectionSongService)(nil).Create), varargs...)
	return &MockCollectionSongServiceCreateCall{Call: call}
}

// MockCollectionSongServiceCreateCall wrap *gomock.Call
type MockCollectionSongServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionSongServiceCreateCall) Return(arg0 error) *MockCollectionSongServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionSongServiceCreateCall) Do(f func(context.Context, ...*models.CollectionSong) error) *MockCollectionSongServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionSongServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.CollectionSong) error) *MockCollectionSongServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockCollectionSongService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCollectionSongServiceMockRecorder) Delete(ctx any, id ...any) *MockCollectionSongServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCollectionSongService)(nil).Delete), varargs...)
	return &MockCollectionSongServiceDeleteCall{Call: call}
}

// MockCollectionSongServiceDeleteCall wrap *gomock.Call
type MockCollectionSongServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionSongServiceDeleteCall) Return(arg0 error) *MockCollectionSongServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionSongServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockCollectionSongServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionSongServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockCollectionSongServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockCollectionSongService) First(ctx context.Context, params *models.CollectionSong, preloads ...string) (*models.CollectionSong, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.CollectionSong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockCollectionSongServiceMockRecorder) First(ctx, params any, preloads ...any) *MockCollectionSongServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockCollectionSongService)(nil).First), varargs...)
	return &MockCollectionSongServiceFirstCall{Call: call}
}

// MockCollectionSongServiceFirstCall wrap *gomock.Call
type MockCollectionSongServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionSongServiceFirstCall) Return(arg0 *models.CollectionSong, arg1 error) *MockCollectionSongServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionSongServiceFirstCall) Do(f func(context.Context, *models.CollectionSong, ...string) (*models.CollectionSong, error)) *MockCollectionSongServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionSongServiceFirstCall) DoAndReturn(f func(context.Context, *models.CollectionSong, ...string) (*models.CollectionSong, error)) *MockCollectionSongServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockCollectionSongService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.CollectionSong, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.CollectionSong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCollectionSongServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockCollectionSongServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCollectionSongService)(nil).GetByID), varargs...)
	return &MockCollectionSongServiceGetByIDCall{Call: call}
}

// MockCollectionSongServiceGetByIDCall wrap *gomock.Call
type MockCollectionSongServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionSongServiceGetByIDCall) Return(arg0 *models.CollectionSong, arg1 error) *MockCollectionSongServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionSongServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.CollectionSong, error)) *MockCollectionSongServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionSongServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.CollectionSong, error)) *MockCollectionSongServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockCollectionSongService) Last(ctx context.Context, params *models.CollectionSong, preloads ...string) (*models.CollectionSong, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.CollectionSong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockCollectionSongServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockCollectionSongServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockCollectionSongService)(nil).Last), varargs...)
	return &MockCollectionSongServiceLastCall{Call: call}
}

// MockCollectionSongServiceLastCall wrap *gomock.Call
type MockCollectionSongServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionSongServiceLastCall) Return(arg0 *models.CollectionSong, arg1 error) *MockCollectionSongServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionSongServiceLastCall) Do(f func(context.Context, *models.CollectionSong, ...string) (*models.CollectionSong, error)) *MockCollectionSongServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionSongServiceLastCall) DoAndReturn(f func(context.Context, *models.CollectionSong, ...string) (*models.CollectionSong, error)) *MockCollectionSongServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockCollectionSongService) Update(ctx context.Context, entity *models.CollectionSong) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCollectionSongServiceMockRecorder) Update(ctx, entity any) *MockCollectionSongServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCollectionSongService)(nil).Update), ctx, entity)
	return &MockCollectionSongServiceUpdateCall{Call: call}
}

// MockCollectionSongServiceUpdateCall wrap *gomock.Call
type MockCollectionSongServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionSongServiceUpdateCall) Return(arg0 error) *MockCollectionSongServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionSongServiceUpdateCall) Do(f func(context.Context, *models.CollectionSong) error) *MockCollectionSongServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionSongServiceUpdateCall) DoAndReturn(f func(context.Context, *models.CollectionSong) error) *MockCollectionSongServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockCollectionSongService) Where(ctx context.Context, params *models.CollectionSong, opts ...query.Option) ([]models.CollectionSong, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.CollectionSong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockCollectionSongServiceMockRecorder) Where(ctx, params any, opts ...any) *MockCollectionSongServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockCollectionSongService)(nil).Where), varargs...)
	return &MockCollectionSongServiceWhereCall{Call: call}
}

// MockCollectionSongServiceWhereCall wrap *gomock.Call
type MockCollectionSongServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionSongServiceWhereCall) Return(arg0 []models.CollectionSong, arg1 error) *MockCollectionSongServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionSongServiceWhereCall) Do(f func(context.Context, *models.CollectionSong, ...query.Option) ([]models.CollectionSong, error)) *MockCollectionSongServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionSongServiceWhereCall) DoAndReturn(f func(context.Context, *models.CollectionSong, ...query.Option) ([]models.CollectionSong, error)) *MockCollectionSongServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
