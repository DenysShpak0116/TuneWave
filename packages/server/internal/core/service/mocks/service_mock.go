// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../../service/mocks/service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder[T]
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder[T any] struct {
	mock *MockService[T]
}

// NewMockService creates a new mock instance.
func NewMockService[T any](ctrl *gomock.Controller) *MockService[T] {
	mock := &MockService[T]{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService[T]) EXPECT() *MockServiceMockRecorder[T] {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockService[T]) CountWhere(ctx context.Context, params *T) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockServiceMockRecorder[T]) CountWhere(ctx, params any) *MockServiceCountWhereCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockService[T])(nil).CountWhere), ctx, params)
	return &MockServiceCountWhereCall[T]{Call: call}
}

// MockServiceCountWhereCall wrap *gomock.Call
type MockServiceCountWhereCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCountWhereCall[T]) Return(arg0 int64, arg1 error) *MockServiceCountWhereCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCountWhereCall[T]) Do(f func(context.Context, *T) (int64, error)) *MockServiceCountWhereCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCountWhereCall[T]) DoAndReturn(f func(context.Context, *T) (int64, error)) *MockServiceCountWhereCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockService[T]) Create(ctx context.Context, entities ...*T) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder[T]) Create(ctx any, entities ...any) *MockServiceCreateCall[T] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService[T])(nil).Create), varargs...)
	return &MockServiceCreateCall[T]{Call: call}
}

// MockServiceCreateCall wrap *gomock.Call
type MockServiceCreateCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateCall[T]) Return(arg0 error) *MockServiceCreateCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateCall[T]) Do(f func(context.Context, ...*T) error) *MockServiceCreateCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateCall[T]) DoAndReturn(f func(context.Context, ...*T) error) *MockServiceCreateCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockService[T]) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder[T]) Delete(ctx any, id ...any) *MockServiceDeleteCall[T] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService[T])(nil).Delete), varargs...)
	return &MockServiceDeleteCall[T]{Call: call}
}

// MockServiceDeleteCall wrap *gomock.Call
type MockServiceDeleteCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteCall[T]) Return(arg0 error) *MockServiceDeleteCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteCall[T]) Do(f func(context.Context, ...uuid.UUID) error) *MockServiceDeleteCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteCall[T]) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockServiceDeleteCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockService[T]) First(ctx context.Context, params *T, preloads ...string) (*T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockServiceMockRecorder[T]) First(ctx, params any, preloads ...any) *MockServiceFirstCall[T] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockService[T])(nil).First), varargs...)
	return &MockServiceFirstCall[T]{Call: call}
}

// MockServiceFirstCall wrap *gomock.Call
type MockServiceFirstCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFirstCall[T]) Return(arg0 *T, arg1 error) *MockServiceFirstCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFirstCall[T]) Do(f func(context.Context, *T, ...string) (*T, error)) *MockServiceFirstCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFirstCall[T]) DoAndReturn(f func(context.Context, *T, ...string) (*T, error)) *MockServiceFirstCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockService[T]) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder[T]) GetByID(ctx, id any, preloads ...any) *MockServiceGetByIDCall[T] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService[T])(nil).GetByID), varargs...)
	return &MockServiceGetByIDCall[T]{Call: call}
}

// MockServiceGetByIDCall wrap *gomock.Call
type MockServiceGetByIDCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetByIDCall[T]) Return(arg0 *T, arg1 error) *MockServiceGetByIDCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetByIDCall[T]) Do(f func(context.Context, uuid.UUID, ...string) (*T, error)) *MockServiceGetByIDCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetByIDCall[T]) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*T, error)) *MockServiceGetByIDCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockService[T]) Last(ctx context.Context, params *T, preloads ...string) (*T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockServiceMockRecorder[T]) Last(ctx, params any, preloads ...any) *MockServiceLastCall[T] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockService[T])(nil).Last), varargs...)
	return &MockServiceLastCall[T]{Call: call}
}

// MockServiceLastCall wrap *gomock.Call
type MockServiceLastCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceLastCall[T]) Return(arg0 *T, arg1 error) *MockServiceLastCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceLastCall[T]) Do(f func(context.Context, *T, ...string) (*T, error)) *MockServiceLastCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceLastCall[T]) DoAndReturn(f func(context.Context, *T, ...string) (*T, error)) *MockServiceLastCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockService[T]) Update(ctx context.Context, entity *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder[T]) Update(ctx, entity any) *MockServiceUpdateCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService[T])(nil).Update), ctx, entity)
	return &MockServiceUpdateCall[T]{Call: call}
}

// MockServiceUpdateCall wrap *gomock.Call
type MockServiceUpdateCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateCall[T]) Return(arg0 error) *MockServiceUpdateCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateCall[T]) Do(f func(context.Context, *T) error) *MockServiceUpdateCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateCall[T]) DoAndReturn(f func(context.Context, *T) error) *MockServiceUpdateCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockService[T]) Where(ctx context.Context, params *T, opts ...query.Option) ([]T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockServiceMockRecorder[T]) Where(ctx, params any, opts ...any) *MockServiceWhereCall[T] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockService[T])(nil).Where), varargs...)
	return &MockServiceWhereCall[T]{Call: call}
}

// MockServiceWhereCall wrap *gomock.Call
type MockServiceWhereCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceWhereCall[T]) Return(arg0 []T, arg1 error) *MockServiceWhereCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceWhereCall[T]) Do(f func(context.Context, *T, ...query.Option) ([]T, error)) *MockServiceWhereCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceWhereCall[T]) DoAndReturn(f func(context.Context, *T, ...query.Option) ([]T, error)) *MockServiceWhereCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
