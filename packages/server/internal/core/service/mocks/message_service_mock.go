// Code generated by MockGen. DO NOT EDIT.
// Source: message_service.go
//
// Generated by this command:
//
//	mockgen -source=message_service.go -destination=../../service/mocks/message_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
	isgomock struct{}
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockMessageService) CountWhere(ctx context.Context, params *models.Message) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockMessageServiceMockRecorder) CountWhere(ctx, params any) *MockMessageServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockMessageService)(nil).CountWhere), ctx, params)
	return &MockMessageServiceCountWhereCall{Call: call}
}

// MockMessageServiceCountWhereCall wrap *gomock.Call
type MockMessageServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockMessageServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageServiceCountWhereCall) Do(f func(context.Context, *models.Message) (int64, error)) *MockMessageServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.Message) (int64, error)) *MockMessageServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockMessageService) Create(ctx context.Context, entities ...*models.Message) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageServiceMockRecorder) Create(ctx any, entities ...any) *MockMessageServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageService)(nil).Create), varargs...)
	return &MockMessageServiceCreateCall{Call: call}
}

// MockMessageServiceCreateCall wrap *gomock.Call
type MockMessageServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageServiceCreateCall) Return(arg0 error) *MockMessageServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageServiceCreateCall) Do(f func(context.Context, ...*models.Message) error) *MockMessageServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.Message) error) *MockMessageServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockMessageService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageServiceMockRecorder) Delete(ctx any, id ...any) *MockMessageServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageService)(nil).Delete), varargs...)
	return &MockMessageServiceDeleteCall{Call: call}
}

// MockMessageServiceDeleteCall wrap *gomock.Call
type MockMessageServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageServiceDeleteCall) Return(arg0 error) *MockMessageServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockMessageServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockMessageServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockMessageService) First(ctx context.Context, params *models.Message, preloads ...string) (*models.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockMessageServiceMockRecorder) First(ctx, params any, preloads ...any) *MockMessageServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockMessageService)(nil).First), varargs...)
	return &MockMessageServiceFirstCall{Call: call}
}

// MockMessageServiceFirstCall wrap *gomock.Call
type MockMessageServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageServiceFirstCall) Return(arg0 *models.Message, arg1 error) *MockMessageServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageServiceFirstCall) Do(f func(context.Context, *models.Message, ...string) (*models.Message, error)) *MockMessageServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageServiceFirstCall) DoAndReturn(f func(context.Context, *models.Message, ...string) (*models.Message, error)) *MockMessageServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockMessageService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMessageServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockMessageServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMessageService)(nil).GetByID), varargs...)
	return &MockMessageServiceGetByIDCall{Call: call}
}

// MockMessageServiceGetByIDCall wrap *gomock.Call
type MockMessageServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageServiceGetByIDCall) Return(arg0 *models.Message, arg1 error) *MockMessageServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.Message, error)) *MockMessageServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.Message, error)) *MockMessageServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockMessageService) Last(ctx context.Context, params *models.Message, preloads ...string) (*models.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockMessageServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockMessageServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockMessageService)(nil).Last), varargs...)
	return &MockMessageServiceLastCall{Call: call}
}

// MockMessageServiceLastCall wrap *gomock.Call
type MockMessageServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageServiceLastCall) Return(arg0 *models.Message, arg1 error) *MockMessageServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageServiceLastCall) Do(f func(context.Context, *models.Message, ...string) (*models.Message, error)) *MockMessageServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageServiceLastCall) DoAndReturn(f func(context.Context, *models.Message, ...string) (*models.Message, error)) *MockMessageServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockMessageService) Update(ctx context.Context, entity *models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMessageServiceMockRecorder) Update(ctx, entity any) *MockMessageServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMessageService)(nil).Update), ctx, entity)
	return &MockMessageServiceUpdateCall{Call: call}
}

// MockMessageServiceUpdateCall wrap *gomock.Call
type MockMessageServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageServiceUpdateCall) Return(arg0 error) *MockMessageServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageServiceUpdateCall) Do(f func(context.Context, *models.Message) error) *MockMessageServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageServiceUpdateCall) DoAndReturn(f func(context.Context, *models.Message) error) *MockMessageServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockMessageService) Where(ctx context.Context, params *models.Message, opts ...query.Option) ([]models.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockMessageServiceMockRecorder) Where(ctx, params any, opts ...any) *MockMessageServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockMessageService)(nil).Where), varargs...)
	return &MockMessageServiceWhereCall{Call: call}
}

// MockMessageServiceWhereCall wrap *gomock.Call
type MockMessageServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageServiceWhereCall) Return(arg0 []models.Message, arg1 error) *MockMessageServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageServiceWhereCall) Do(f func(context.Context, *models.Message, ...query.Option) ([]models.Message, error)) *MockMessageServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageServiceWhereCall) DoAndReturn(f func(context.Context, *models.Message, ...query.Option) ([]models.Message, error)) *MockMessageServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
