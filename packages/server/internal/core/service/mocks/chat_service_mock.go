// Code generated by MockGen. DO NOT EDIT.
// Source: chat_service.go
//
// Generated by this command:
//
//	mockgen -source=chat_service.go -destination=../../service/mocks/chat_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
	isgomock struct{}
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockChatService) CountWhere(ctx context.Context, params *models.Chat) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockChatServiceMockRecorder) CountWhere(ctx, params any) *MockChatServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockChatService)(nil).CountWhere), ctx, params)
	return &MockChatServiceCountWhereCall{Call: call}
}

// MockChatServiceCountWhereCall wrap *gomock.Call
type MockChatServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChatServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockChatServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChatServiceCountWhereCall) Do(f func(context.Context, *models.Chat) (int64, error)) *MockChatServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChatServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.Chat) (int64, error)) *MockChatServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockChatService) Create(ctx context.Context, entities ...*models.Chat) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatServiceMockRecorder) Create(ctx any, entities ...any) *MockChatServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatService)(nil).Create), varargs...)
	return &MockChatServiceCreateCall{Call: call}
}

// MockChatServiceCreateCall wrap *gomock.Call
type MockChatServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChatServiceCreateCall) Return(arg0 error) *MockChatServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChatServiceCreateCall) Do(f func(context.Context, ...*models.Chat) error) *MockChatServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChatServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.Chat) error) *MockChatServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockChatService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChatServiceMockRecorder) Delete(ctx any, id ...any) *MockChatServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChatService)(nil).Delete), varargs...)
	return &MockChatServiceDeleteCall{Call: call}
}

// MockChatServiceDeleteCall wrap *gomock.Call
type MockChatServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChatServiceDeleteCall) Return(arg0 error) *MockChatServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChatServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockChatServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChatServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockChatServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockChatService) First(ctx context.Context, params *models.Chat, preloads ...string) (*models.Chat, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockChatServiceMockRecorder) First(ctx, params any, preloads ...any) *MockChatServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockChatService)(nil).First), varargs...)
	return &MockChatServiceFirstCall{Call: call}
}

// MockChatServiceFirstCall wrap *gomock.Call
type MockChatServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChatServiceFirstCall) Return(arg0 *models.Chat, arg1 error) *MockChatServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChatServiceFirstCall) Do(f func(context.Context, *models.Chat, ...string) (*models.Chat, error)) *MockChatServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChatServiceFirstCall) DoAndReturn(f func(context.Context, *models.Chat, ...string) (*models.Chat, error)) *MockChatServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockChatService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.Chat, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockChatServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockChatServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockChatService)(nil).GetByID), varargs...)
	return &MockChatServiceGetByIDCall{Call: call}
}

// MockChatServiceGetByIDCall wrap *gomock.Call
type MockChatServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChatServiceGetByIDCall) Return(arg0 *models.Chat, arg1 error) *MockChatServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChatServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.Chat, error)) *MockChatServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChatServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.Chat, error)) *MockChatServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrCreatePrivateChat mocks base method.
func (m *MockChatService) GetOrCreatePrivateChat(ctx context.Context, user1, user2 uuid.UUID) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreatePrivateChat", ctx, user1, user2)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreatePrivateChat indicates an expected call of GetOrCreatePrivateChat.
func (mr *MockChatServiceMockRecorder) GetOrCreatePrivateChat(ctx, user1, user2 any) *MockChatServiceGetOrCreatePrivateChatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreatePrivateChat", reflect.TypeOf((*MockChatService)(nil).GetOrCreatePrivateChat), ctx, user1, user2)
	return &MockChatServiceGetOrCreatePrivateChatCall{Call: call}
}

// MockChatServiceGetOrCreatePrivateChatCall wrap *gomock.Call
type MockChatServiceGetOrCreatePrivateChatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChatServiceGetOrCreatePrivateChatCall) Return(arg0 *models.Chat, arg1 error) *MockChatServiceGetOrCreatePrivateChatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChatServiceGetOrCreatePrivateChatCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) (*models.Chat, error)) *MockChatServiceGetOrCreatePrivateChatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChatServiceGetOrCreatePrivateChatCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) (*models.Chat, error)) *MockChatServiceGetOrCreatePrivateChatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockChatService) Last(ctx context.Context, params *models.Chat, preloads ...string) (*models.Chat, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockChatServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockChatServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockChatService)(nil).Last), varargs...)
	return &MockChatServiceLastCall{Call: call}
}

// MockChatServiceLastCall wrap *gomock.Call
type MockChatServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChatServiceLastCall) Return(arg0 *models.Chat, arg1 error) *MockChatServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChatServiceLastCall) Do(f func(context.Context, *models.Chat, ...string) (*models.Chat, error)) *MockChatServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChatServiceLastCall) DoAndReturn(f func(context.Context, *models.Chat, ...string) (*models.Chat, error)) *MockChatServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockChatService) Update(ctx context.Context, entity *models.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockChatServiceMockRecorder) Update(ctx, entity any) *MockChatServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChatService)(nil).Update), ctx, entity)
	return &MockChatServiceUpdateCall{Call: call}
}

// MockChatServiceUpdateCall wrap *gomock.Call
type MockChatServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChatServiceUpdateCall) Return(arg0 error) *MockChatServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChatServiceUpdateCall) Do(f func(context.Context, *models.Chat) error) *MockChatServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChatServiceUpdateCall) DoAndReturn(f func(context.Context, *models.Chat) error) *MockChatServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockChatService) Where(ctx context.Context, params *models.Chat, opts ...query.Option) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockChatServiceMockRecorder) Where(ctx, params any, opts ...any) *MockChatServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockChatService)(nil).Where), varargs...)
	return &MockChatServiceWhereCall{Call: call}
}

// MockChatServiceWhereCall wrap *gomock.Call
type MockChatServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChatServiceWhereCall) Return(arg0 []models.Chat, arg1 error) *MockChatServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChatServiceWhereCall) Do(f func(context.Context, *models.Chat, ...query.Option) ([]models.Chat, error)) *MockChatServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChatServiceWhereCall) DoAndReturn(f func(context.Context, *models.Chat, ...query.Option) ([]models.Chat, error)) *MockChatServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
