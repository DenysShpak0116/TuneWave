// Code generated by MockGen. DO NOT EDIT.
// Source: song_service.go
//
// Generated by this command:
//
//	mockgen -source=song_service.go -destination=../../service/mocks/song_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	services "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/port/services"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSongService is a mock of SongService interface.
type MockSongService struct {
	ctrl     *gomock.Controller
	recorder *MockSongServiceMockRecorder
	isgomock struct{}
}

// MockSongServiceMockRecorder is the mock recorder for MockSongService.
type MockSongServiceMockRecorder struct {
	mock *MockSongService
}

// NewMockSongService creates a new mock instance.
func NewMockSongService(ctrl *gomock.Controller) *MockSongService {
	mock := &MockSongService{ctrl: ctrl}
	mock.recorder = &MockSongServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongService) EXPECT() *MockSongServiceMockRecorder {
	return m.recorder
}

// AddToCollection mocks base method.
func (m *MockSongService) AddToCollection(ctx context.Context, songUUID, collectionUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCollection", ctx, songUUID, collectionUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCollection indicates an expected call of AddToCollection.
func (mr *MockSongServiceMockRecorder) AddToCollection(ctx, songUUID, collectionUUID any) *MockSongServiceAddToCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCollection", reflect.TypeOf((*MockSongService)(nil).AddToCollection), ctx, songUUID, collectionUUID)
	return &MockSongServiceAddToCollectionCall{Call: call}
}

// MockSongServiceAddToCollectionCall wrap *gomock.Call
type MockSongServiceAddToCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceAddToCollectionCall) Return(arg0 error) *MockSongServiceAddToCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceAddToCollectionCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockSongServiceAddToCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceAddToCollectionCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockSongServiceAddToCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountWhere mocks base method.
func (m *MockSongService) CountWhere(ctx context.Context, params *models.Song) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockSongServiceMockRecorder) CountWhere(ctx, params any) *MockSongServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockSongService)(nil).CountWhere), ctx, params)
	return &MockSongServiceCountWhereCall{Call: call}
}

// MockSongServiceCountWhereCall wrap *gomock.Call
type MockSongServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockSongServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceCountWhereCall) Do(f func(context.Context, *models.Song) (int64, error)) *MockSongServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.Song) (int64, error)) *MockSongServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockSongService) Create(ctx context.Context, entities ...*models.Song) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSongServiceMockRecorder) Create(ctx any, entities ...any) *MockSongServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSongService)(nil).Create), varargs...)
	return &MockSongServiceCreateCall{Call: call}
}

// MockSongServiceCreateCall wrap *gomock.Call
type MockSongServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceCreateCall) Return(arg0 error) *MockSongServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceCreateCall) Do(f func(context.Context, ...*models.Song) error) *MockSongServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.Song) error) *MockSongServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockSongService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSongServiceMockRecorder) Delete(ctx any, id ...any) *MockSongServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSongService)(nil).Delete), varargs...)
	return &MockSongServiceDeleteCall{Call: call}
}

// MockSongServiceDeleteCall wrap *gomock.Call
type MockSongServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceDeleteCall) Return(arg0 error) *MockSongServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockSongServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockSongServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockSongService) First(ctx context.Context, params *models.Song, preloads ...string) (*models.Song, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockSongServiceMockRecorder) First(ctx, params any, preloads ...any) *MockSongServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockSongService)(nil).First), varargs...)
	return &MockSongServiceFirstCall{Call: call}
}

// MockSongServiceFirstCall wrap *gomock.Call
type MockSongServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceFirstCall) Return(arg0 *models.Song, arg1 error) *MockSongServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceFirstCall) Do(f func(context.Context, *models.Song, ...string) (*models.Song, error)) *MockSongServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceFirstCall) DoAndReturn(f func(context.Context, *models.Song, ...string) (*models.Song, error)) *MockSongServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockSongService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.Song, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSongServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockSongServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSongService)(nil).GetByID), varargs...)
	return &MockSongServiceGetByIDCall{Call: call}
}

// MockSongServiceGetByIDCall wrap *gomock.Call
type MockSongServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceGetByIDCall) Return(arg0 *models.Song, arg1 error) *MockSongServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.Song, error)) *MockSongServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.Song, error)) *MockSongServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGenres mocks base method.
func (m *MockSongService) GetGenres(arg0 context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetGenres indicates an expected call of GetGenres.
func (mr *MockSongServiceMockRecorder) GetGenres(arg0 any) *MockSongServiceGetGenresCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockSongService)(nil).GetGenres), arg0)
	return &MockSongServiceGetGenresCall{Call: call}
}

// MockSongServiceGetGenresCall wrap *gomock.Call
type MockSongServiceGetGenresCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceGetGenresCall) Return(arg0 []string) *MockSongServiceGetGenresCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceGetGenresCall) Do(f func(context.Context) []string) *MockSongServiceGetGenresCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceGetGenresCall) DoAndReturn(f func(context.Context) []string) *MockSongServiceGetGenresCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGenresMostPopularSong mocks base method.
func (m *MockSongService) GetGenresMostPopularSong(ctx context.Context, genre string) (*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenresMostPopularSong", ctx, genre)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenresMostPopularSong indicates an expected call of GetGenresMostPopularSong.
func (mr *MockSongServiceMockRecorder) GetGenresMostPopularSong(ctx, genre any) *MockSongServiceGetGenresMostPopularSongCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenresMostPopularSong", reflect.TypeOf((*MockSongService)(nil).GetGenresMostPopularSong), ctx, genre)
	return &MockSongServiceGetGenresMostPopularSongCall{Call: call}
}

// MockSongServiceGetGenresMostPopularSongCall wrap *gomock.Call
type MockSongServiceGetGenresMostPopularSongCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceGetGenresMostPopularSongCall) Return(arg0 *models.Song, arg1 error) *MockSongServiceGetGenresMostPopularSongCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceGetGenresMostPopularSongCall) Do(f func(context.Context, string) (*models.Song, error)) *MockSongServiceGetGenresMostPopularSongCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceGetGenresMostPopularSongCall) DoAndReturn(f func(context.Context, string) (*models.Song, error)) *MockSongServiceGetGenresMostPopularSongCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSongs mocks base method.
func (m *MockSongService) GetSongs(ctx context.Context, params services.SearchSongsParams, preloads ...string) ([]models.Song, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSongs", varargs...)
	ret0, _ := ret[0].([]models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongs indicates an expected call of GetSongs.
func (mr *MockSongServiceMockRecorder) GetSongs(ctx, params any, preloads ...any) *MockSongServiceGetSongsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongs", reflect.TypeOf((*MockSongService)(nil).GetSongs), varargs...)
	return &MockSongServiceGetSongsCall{Call: call}
}

// MockSongServiceGetSongsCall wrap *gomock.Call
type MockSongServiceGetSongsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceGetSongsCall) Return(arg0 []models.Song, arg1 error) *MockSongServiceGetSongsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceGetSongsCall) Do(f func(context.Context, services.SearchSongsParams, ...string) ([]models.Song, error)) *MockSongServiceGetSongsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceGetSongsCall) DoAndReturn(f func(context.Context, services.SearchSongsParams, ...string) ([]models.Song, error)) *MockSongServiceGetSongsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsReactedByUser mocks base method.
func (m *MockSongService) IsReactedByUser(ctx context.Context, songID, userID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReactedByUser", ctx, songID, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReactedByUser indicates an expected call of IsReactedByUser.
func (mr *MockSongServiceMockRecorder) IsReactedByUser(ctx, songID, userID any) *MockSongServiceIsReactedByUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReactedByUser", reflect.TypeOf((*MockSongService)(nil).IsReactedByUser), ctx, songID, userID)
	return &MockSongServiceIsReactedByUserCall{Call: call}
}

// MockSongServiceIsReactedByUserCall wrap *gomock.Call
type MockSongServiceIsReactedByUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceIsReactedByUserCall) Return(arg0 string, arg1 error) *MockSongServiceIsReactedByUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceIsReactedByUserCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) (string, error)) *MockSongServiceIsReactedByUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceIsReactedByUserCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) (string, error)) *MockSongServiceIsReactedByUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockSongService) Last(ctx context.Context, params *models.Song, preloads ...string) (*models.Song, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockSongServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockSongServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockSongService)(nil).Last), varargs...)
	return &MockSongServiceLastCall{Call: call}
}

// MockSongServiceLastCall wrap *gomock.Call
type MockSongServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceLastCall) Return(arg0 *models.Song, arg1 error) *MockSongServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceLastCall) Do(f func(context.Context, *models.Song, ...string) (*models.Song, error)) *MockSongServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceLastCall) DoAndReturn(f func(context.Context, *models.Song, ...string) (*models.Song, error)) *MockSongServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReactionsCount mocks base method.
func (m *MockSongService) ReactionsCount(ctx context.Context, id uuid.UUID, reactionType string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactionsCount", ctx, id, reactionType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReactionsCount indicates an expected call of ReactionsCount.
func (mr *MockSongServiceMockRecorder) ReactionsCount(ctx, id, reactionType any) *MockSongServiceReactionsCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactionsCount", reflect.TypeOf((*MockSongService)(nil).ReactionsCount), ctx, id, reactionType)
	return &MockSongServiceReactionsCountCall{Call: call}
}

// MockSongServiceReactionsCountCall wrap *gomock.Call
type MockSongServiceReactionsCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceReactionsCountCall) Return(arg0 int64, arg1 error) *MockSongServiceReactionsCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceReactionsCountCall) Do(f func(context.Context, uuid.UUID, string) (int64, error)) *MockSongServiceReactionsCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceReactionsCountCall) DoAndReturn(f func(context.Context, uuid.UUID, string) (int64, error)) *MockSongServiceReactionsCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveSong mocks base method.
func (m *MockSongService) SaveSong(ctx context.Context, songParams services.SaveSongParams) (*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSong", ctx, songParams)
	ret0, _ := ret[0].(*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSong indicates an expected call of SaveSong.
func (mr *MockSongServiceMockRecorder) SaveSong(ctx, songParams any) *MockSongServiceSaveSongCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSong", reflect.TypeOf((*MockSongService)(nil).SaveSong), ctx, songParams)
	return &MockSongServiceSaveSongCall{Call: call}
}

// MockSongServiceSaveSongCall wrap *gomock.Call
type MockSongServiceSaveSongCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceSaveSongCall) Return(arg0 *models.Song, arg1 error) *MockSongServiceSaveSongCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceSaveSongCall) Do(f func(context.Context, services.SaveSongParams) (*models.Song, error)) *MockSongServiceSaveSongCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceSaveSongCall) DoAndReturn(f func(context.Context, services.SaveSongParams) (*models.Song, error)) *MockSongServiceSaveSongCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetReaction mocks base method.
func (m *MockSongService) SetReaction(ctx context.Context, songID, userID uuid.UUID, reactionType string) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReaction", ctx, songID, userID, reactionType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetReaction indicates an expected call of SetReaction.
func (mr *MockSongServiceMockRecorder) SetReaction(ctx, songID, userID, reactionType any) *MockSongServiceSetReactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReaction", reflect.TypeOf((*MockSongService)(nil).SetReaction), ctx, songID, userID, reactionType)
	return &MockSongServiceSetReactionCall{Call: call}
}

// MockSongServiceSetReactionCall wrap *gomock.Call
type MockSongServiceSetReactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceSetReactionCall) Return(arg0, arg1 int64, arg2 error) *MockSongServiceSetReactionCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceSetReactionCall) Do(f func(context.Context, uuid.UUID, uuid.UUID, string) (int64, int64, error)) *MockSongServiceSetReactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceSetReactionCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID, string) (int64, int64, error)) *MockSongServiceSetReactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockSongService) Update(ctx context.Context, entity *models.Song) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSongServiceMockRecorder) Update(ctx, entity any) *MockSongServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSongService)(nil).Update), ctx, entity)
	return &MockSongServiceUpdateCall{Call: call}
}

// MockSongServiceUpdateCall wrap *gomock.Call
type MockSongServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceUpdateCall) Return(arg0 error) *MockSongServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceUpdateCall) Do(f func(context.Context, *models.Song) error) *MockSongServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceUpdateCall) DoAndReturn(f func(context.Context, *models.Song) error) *MockSongServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSong mocks base method.
func (m *MockSongService) UpdateSong(ctx context.Context, songParams services.UpdateSongParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSong", ctx, songParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSong indicates an expected call of UpdateSong.
func (mr *MockSongServiceMockRecorder) UpdateSong(ctx, songParams any) *MockSongServiceUpdateSongCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSong", reflect.TypeOf((*MockSongService)(nil).UpdateSong), ctx, songParams)
	return &MockSongServiceUpdateSongCall{Call: call}
}

// MockSongServiceUpdateSongCall wrap *gomock.Call
type MockSongServiceUpdateSongCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceUpdateSongCall) Return(arg0 error) *MockSongServiceUpdateSongCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceUpdateSongCall) Do(f func(context.Context, services.UpdateSongParams) error) *MockSongServiceUpdateSongCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceUpdateSongCall) DoAndReturn(f func(context.Context, services.UpdateSongParams) error) *MockSongServiceUpdateSongCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockSongService) Where(ctx context.Context, params *models.Song, opts ...query.Option) ([]models.Song, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockSongServiceMockRecorder) Where(ctx, params any, opts ...any) *MockSongServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockSongService)(nil).Where), varargs...)
	return &MockSongServiceWhereCall{Call: call}
}

// MockSongServiceWhereCall wrap *gomock.Call
type MockSongServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSongServiceWhereCall) Return(arg0 []models.Song, arg1 error) *MockSongServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSongServiceWhereCall) Do(f func(context.Context, *models.Song, ...query.Option) ([]models.Song, error)) *MockSongServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSongServiceWhereCall) DoAndReturn(f func(context.Context, *models.Song, ...query.Option) ([]models.Song, error)) *MockSongServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
