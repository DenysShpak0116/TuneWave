// Code generated by MockGen. DO NOT EDIT.
// Source: vector_service.go
//
// Generated by this command:
//
//	mockgen -source=vector_service.go -destination=../../service/mocks/vector_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockVectorService is a mock of VectorService interface.
type MockVectorService struct {
	ctrl     *gomock.Controller
	recorder *MockVectorServiceMockRecorder
	isgomock struct{}
}

// MockVectorServiceMockRecorder is the mock recorder for MockVectorService.
type MockVectorServiceMockRecorder struct {
	mock *MockVectorService
}

// NewMockVectorService creates a new mock instance.
func NewMockVectorService(ctrl *gomock.Controller) *MockVectorService {
	mock := &MockVectorService{ctrl: ctrl}
	mock.recorder = &MockVectorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVectorService) EXPECT() *MockVectorServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockVectorService) CountWhere(ctx context.Context, params *models.Vector) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockVectorServiceMockRecorder) CountWhere(ctx, params any) *MockVectorServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockVectorService)(nil).CountWhere), ctx, params)
	return &MockVectorServiceCountWhereCall{Call: call}
}

// MockVectorServiceCountWhereCall wrap *gomock.Call
type MockVectorServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVectorServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockVectorServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVectorServiceCountWhereCall) Do(f func(context.Context, *models.Vector) (int64, error)) *MockVectorServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVectorServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.Vector) (int64, error)) *MockVectorServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockVectorService) Create(ctx context.Context, entities ...*models.Vector) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVectorServiceMockRecorder) Create(ctx any, entities ...any) *MockVectorServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVectorService)(nil).Create), varargs...)
	return &MockVectorServiceCreateCall{Call: call}
}

// MockVectorServiceCreateCall wrap *gomock.Call
type MockVectorServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVectorServiceCreateCall) Return(arg0 error) *MockVectorServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVectorServiceCreateCall) Do(f func(context.Context, ...*models.Vector) error) *MockVectorServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVectorServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.Vector) error) *MockVectorServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockVectorService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVectorServiceMockRecorder) Delete(ctx any, id ...any) *MockVectorServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVectorService)(nil).Delete), varargs...)
	return &MockVectorServiceDeleteCall{Call: call}
}

// MockVectorServiceDeleteCall wrap *gomock.Call
type MockVectorServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVectorServiceDeleteCall) Return(arg0 error) *MockVectorServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVectorServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockVectorServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVectorServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockVectorServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockVectorService) First(ctx context.Context, params *models.Vector, preloads ...string) (*models.Vector, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.Vector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockVectorServiceMockRecorder) First(ctx, params any, preloads ...any) *MockVectorServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockVectorService)(nil).First), varargs...)
	return &MockVectorServiceFirstCall{Call: call}
}

// MockVectorServiceFirstCall wrap *gomock.Call
type MockVectorServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVectorServiceFirstCall) Return(arg0 *models.Vector, arg1 error) *MockVectorServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVectorServiceFirstCall) Do(f func(context.Context, *models.Vector, ...string) (*models.Vector, error)) *MockVectorServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVectorServiceFirstCall) DoAndReturn(f func(context.Context, *models.Vector, ...string) (*models.Vector, error)) *MockVectorServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockVectorService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.Vector, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.Vector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockVectorServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockVectorServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockVectorService)(nil).GetByID), varargs...)
	return &MockVectorServiceGetByIDCall{Call: call}
}

// MockVectorServiceGetByIDCall wrap *gomock.Call
type MockVectorServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVectorServiceGetByIDCall) Return(arg0 *models.Vector, arg1 error) *MockVectorServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVectorServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.Vector, error)) *MockVectorServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVectorServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.Vector, error)) *MockVectorServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockVectorService) Last(ctx context.Context, params *models.Vector, preloads ...string) (*models.Vector, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.Vector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockVectorServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockVectorServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockVectorService)(nil).Last), varargs...)
	return &MockVectorServiceLastCall{Call: call}
}

// MockVectorServiceLastCall wrap *gomock.Call
type MockVectorServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVectorServiceLastCall) Return(arg0 *models.Vector, arg1 error) *MockVectorServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVectorServiceLastCall) Do(f func(context.Context, *models.Vector, ...string) (*models.Vector, error)) *MockVectorServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVectorServiceLastCall) DoAndReturn(f func(context.Context, *models.Vector, ...string) (*models.Vector, error)) *MockVectorServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockVectorService) Update(ctx context.Context, entity *models.Vector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVectorServiceMockRecorder) Update(ctx, entity any) *MockVectorServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVectorService)(nil).Update), ctx, entity)
	return &MockVectorServiceUpdateCall{Call: call}
}

// MockVectorServiceUpdateCall wrap *gomock.Call
type MockVectorServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVectorServiceUpdateCall) Return(arg0 error) *MockVectorServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVectorServiceUpdateCall) Do(f func(context.Context, *models.Vector) error) *MockVectorServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVectorServiceUpdateCall) DoAndReturn(f func(context.Context, *models.Vector) error) *MockVectorServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockVectorService) Where(ctx context.Context, params *models.Vector, opts ...query.Option) ([]models.Vector, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.Vector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockVectorServiceMockRecorder) Where(ctx, params any, opts ...any) *MockVectorServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockVectorService)(nil).Where), varargs...)
	return &MockVectorServiceWhereCall{Call: call}
}

// MockVectorServiceWhereCall wrap *gomock.Call
type MockVectorServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVectorServiceWhereCall) Return(arg0 []models.Vector, arg1 error) *MockVectorServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVectorServiceWhereCall) Do(f func(context.Context, *models.Vector, ...query.Option) ([]models.Vector, error)) *MockVectorServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVectorServiceWhereCall) DoAndReturn(f func(context.Context, *models.Vector, ...query.Option) ([]models.Vector, error)) *MockVectorServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
