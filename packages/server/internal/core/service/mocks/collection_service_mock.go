// Code generated by MockGen. DO NOT EDIT.
// Source: collection_service.go
//
// Generated by this command:
//
//	mockgen -source=collection_service.go -destination=../../service/mocks/collection_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	services "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/port/services"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectionService is a mock of CollectionService interface.
type MockCollectionService struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionServiceMockRecorder
	isgomock struct{}
}

// MockCollectionServiceMockRecorder is the mock recorder for MockCollectionService.
type MockCollectionServiceMockRecorder struct {
	mock *MockCollectionService
}

// NewMockCollectionService creates a new mock instance.
func NewMockCollectionService(ctrl *gomock.Controller) *MockCollectionService {
	mock := &MockCollectionService{ctrl: ctrl}
	mock.recorder = &MockCollectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionService) EXPECT() *MockCollectionServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockCollectionService) CountWhere(ctx context.Context, params *models.Collection) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockCollectionServiceMockRecorder) CountWhere(ctx, params any) *MockCollectionServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockCollectionService)(nil).CountWhere), ctx, params)
	return &MockCollectionServiceCountWhereCall{Call: call}
}

// MockCollectionServiceCountWhereCall wrap *gomock.Call
type MockCollectionServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockCollectionServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceCountWhereCall) Do(f func(context.Context, *models.Collection) (int64, error)) *MockCollectionServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.Collection) (int64, error)) *MockCollectionServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockCollectionService) Create(ctx context.Context, entities ...*models.Collection) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCollectionServiceMockRecorder) Create(ctx any, entities ...any) *MockCollectionServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCollectionService)(nil).Create), varargs...)
	return &MockCollectionServiceCreateCall{Call: call}
}

// MockCollectionServiceCreateCall wrap *gomock.Call
type MockCollectionServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceCreateCall) Return(arg0 error) *MockCollectionServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceCreateCall) Do(f func(context.Context, ...*models.Collection) error) *MockCollectionServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.Collection) error) *MockCollectionServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockCollectionService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCollectionServiceMockRecorder) Delete(ctx any, id ...any) *MockCollectionServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCollectionService)(nil).Delete), varargs...)
	return &MockCollectionServiceDeleteCall{Call: call}
}

// MockCollectionServiceDeleteCall wrap *gomock.Call
type MockCollectionServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceDeleteCall) Return(arg0 error) *MockCollectionServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockCollectionServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockCollectionServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockCollectionService) First(ctx context.Context, params *models.Collection, preloads ...string) (*models.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockCollectionServiceMockRecorder) First(ctx, params any, preloads ...any) *MockCollectionServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockCollectionService)(nil).First), varargs...)
	return &MockCollectionServiceFirstCall{Call: call}
}

// MockCollectionServiceFirstCall wrap *gomock.Call
type MockCollectionServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceFirstCall) Return(arg0 *models.Collection, arg1 error) *MockCollectionServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceFirstCall) Do(f func(context.Context, *models.Collection, ...string) (*models.Collection, error)) *MockCollectionServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceFirstCall) DoAndReturn(f func(context.Context, *models.Collection, ...string) (*models.Collection, error)) *MockCollectionServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockCollectionService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCollectionServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockCollectionServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCollectionService)(nil).GetByID), varargs...)
	return &MockCollectionServiceGetByIDCall{Call: call}
}

// MockCollectionServiceGetByIDCall wrap *gomock.Call
type MockCollectionServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceGetByIDCall) Return(arg0 *models.Collection, arg1 error) *MockCollectionServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.Collection, error)) *MockCollectionServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.Collection, error)) *MockCollectionServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCollectionSongs mocks base method.
func (m *MockCollectionService) GetCollectionSongs(ctx context.Context, collectionID uuid.UUID, search, sortBy, order string, page, limit int) ([]models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionSongs", ctx, collectionID, search, sortBy, order, page, limit)
	ret0, _ := ret[0].([]models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionSongs indicates an expected call of GetCollectionSongs.
func (mr *MockCollectionServiceMockRecorder) GetCollectionSongs(ctx, collectionID, search, sortBy, order, page, limit any) *MockCollectionServiceGetCollectionSongsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionSongs", reflect.TypeOf((*MockCollectionService)(nil).GetCollectionSongs), ctx, collectionID, search, sortBy, order, page, limit)
	return &MockCollectionServiceGetCollectionSongsCall{Call: call}
}

// MockCollectionServiceGetCollectionSongsCall wrap *gomock.Call
type MockCollectionServiceGetCollectionSongsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceGetCollectionSongsCall) Return(arg0 []models.Song, arg1 error) *MockCollectionServiceGetCollectionSongsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceGetCollectionSongsCall) Do(f func(context.Context, uuid.UUID, string, string, string, int, int) ([]models.Song, error)) *MockCollectionServiceGetCollectionSongsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceGetCollectionSongsCall) DoAndReturn(f func(context.Context, uuid.UUID, string, string, string, int, int) ([]models.Song, error)) *MockCollectionServiceGetCollectionSongsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMany mocks base method.
func (m *MockCollectionService) GetMany(ctx context.Context, limit, page int, sort, order string, preloads ...string) ([]models.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, limit, page, sort, order}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMany", varargs...)
	ret0, _ := ret[0].([]models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockCollectionServiceMockRecorder) GetMany(ctx, limit, page, sort, order any, preloads ...any) *MockCollectionServiceGetManyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, limit, page, sort, order}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockCollectionService)(nil).GetMany), varargs...)
	return &MockCollectionServiceGetManyCall{Call: call}
}

// MockCollectionServiceGetManyCall wrap *gomock.Call
type MockCollectionServiceGetManyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceGetManyCall) Return(arg0 []models.Collection, arg1 error) *MockCollectionServiceGetManyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceGetManyCall) Do(f func(context.Context, int, int, string, string, ...string) ([]models.Collection, error)) *MockCollectionServiceGetManyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceGetManyCall) DoAndReturn(f func(context.Context, int, int, string, string, ...string) ([]models.Collection, error)) *MockCollectionServiceGetManyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockCollectionService) Last(ctx context.Context, params *models.Collection, preloads ...string) (*models.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockCollectionServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockCollectionServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockCollectionService)(nil).Last), varargs...)
	return &MockCollectionServiceLastCall{Call: call}
}

// MockCollectionServiceLastCall wrap *gomock.Call
type MockCollectionServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceLastCall) Return(arg0 *models.Collection, arg1 error) *MockCollectionServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceLastCall) Do(f func(context.Context, *models.Collection, ...string) (*models.Collection, error)) *MockCollectionServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceLastCall) DoAndReturn(f func(context.Context, *models.Collection, ...string) (*models.Collection, error)) *MockCollectionServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveCollection mocks base method.
func (m *MockCollectionService) SaveCollection(ctx context.Context, saveCollectionParams services.SaveCollectionParams) (*models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCollection", ctx, saveCollectionParams)
	ret0, _ := ret[0].(*models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCollection indicates an expected call of SaveCollection.
func (mr *MockCollectionServiceMockRecorder) SaveCollection(ctx, saveCollectionParams any) *MockCollectionServiceSaveCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCollection", reflect.TypeOf((*MockCollectionService)(nil).SaveCollection), ctx, saveCollectionParams)
	return &MockCollectionServiceSaveCollectionCall{Call: call}
}

// MockCollectionServiceSaveCollectionCall wrap *gomock.Call
type MockCollectionServiceSaveCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceSaveCollectionCall) Return(arg0 *models.Collection, arg1 error) *MockCollectionServiceSaveCollectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceSaveCollectionCall) Do(f func(context.Context, services.SaveCollectionParams) (*models.Collection, error)) *MockCollectionServiceSaveCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceSaveCollectionCall) DoAndReturn(f func(context.Context, services.SaveCollectionParams) (*models.Collection, error)) *MockCollectionServiceSaveCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockCollectionService) Update(ctx context.Context, entity *models.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCollectionServiceMockRecorder) Update(ctx, entity any) *MockCollectionServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCollectionService)(nil).Update), ctx, entity)
	return &MockCollectionServiceUpdateCall{Call: call}
}

// MockCollectionServiceUpdateCall wrap *gomock.Call
type MockCollectionServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceUpdateCall) Return(arg0 error) *MockCollectionServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceUpdateCall) Do(f func(context.Context, *models.Collection) error) *MockCollectionServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceUpdateCall) DoAndReturn(f func(context.Context, *models.Collection) error) *MockCollectionServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCollection mocks base method.
func (m *MockCollectionService) UpdateCollection(ctx context.Context, id uuid.UUID, updateCollectionParams services.UpdateCollectionParams) (*models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollection", ctx, id, updateCollectionParams)
	ret0, _ := ret[0].(*models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollection indicates an expected call of UpdateCollection.
func (mr *MockCollectionServiceMockRecorder) UpdateCollection(ctx, id, updateCollectionParams any) *MockCollectionServiceUpdateCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollection", reflect.TypeOf((*MockCollectionService)(nil).UpdateCollection), ctx, id, updateCollectionParams)
	return &MockCollectionServiceUpdateCollectionCall{Call: call}
}

// MockCollectionServiceUpdateCollectionCall wrap *gomock.Call
type MockCollectionServiceUpdateCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceUpdateCollectionCall) Return(arg0 *models.Collection, arg1 error) *MockCollectionServiceUpdateCollectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceUpdateCollectionCall) Do(f func(context.Context, uuid.UUID, services.UpdateCollectionParams) (*models.Collection, error)) *MockCollectionServiceUpdateCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceUpdateCollectionCall) DoAndReturn(f func(context.Context, uuid.UUID, services.UpdateCollectionParams) (*models.Collection, error)) *MockCollectionServiceUpdateCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockCollectionService) Where(ctx context.Context, params *models.Collection, opts ...query.Option) ([]models.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockCollectionServiceMockRecorder) Where(ctx, params any, opts ...any) *MockCollectionServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockCollectionService)(nil).Where), varargs...)
	return &MockCollectionServiceWhereCall{Call: call}
}

// MockCollectionServiceWhereCall wrap *gomock.Call
type MockCollectionServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCollectionServiceWhereCall) Return(arg0 []models.Collection, arg1 error) *MockCollectionServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCollectionServiceWhereCall) Do(f func(context.Context, *models.Collection, ...query.Option) ([]models.Collection, error)) *MockCollectionServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCollectionServiceWhereCall) DoAndReturn(f func(context.Context, *models.Collection, ...query.Option) ([]models.Collection, error)) *MockCollectionServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
