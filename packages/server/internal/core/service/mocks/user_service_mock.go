// Code generated by MockGen. DO NOT EDIT.
// Source: user_service.go
//
// Generated by this command:
//
//	mockgen -source=user_service.go -destination=../../service/mocks/user_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	services "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/port/services"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockUserService) CountWhere(ctx context.Context, params *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockUserServiceMockRecorder) CountWhere(ctx, params any) *MockUserServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockUserService)(nil).CountWhere), ctx, params)
	return &MockUserServiceCountWhereCall{Call: call}
}

// MockUserServiceCountWhereCall wrap *gomock.Call
type MockUserServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockUserServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceCountWhereCall) Do(f func(context.Context, *models.User) (int64, error)) *MockUserServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.User) (int64, error)) *MockUserServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockUserService) Create(ctx context.Context, entities ...*models.User) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(ctx any, entities ...any) *MockUserServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), varargs...)
	return &MockUserServiceCreateCall{Call: call}
}

// MockUserServiceCreateCall wrap *gomock.Call
type MockUserServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceCreateCall) Return(arg0 error) *MockUserServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceCreateCall) Do(f func(context.Context, ...*models.User) error) *MockUserServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.User) error) *MockUserServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockUserService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(ctx any, id ...any) *MockUserServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), varargs...)
	return &MockUserServiceDeleteCall{Call: call}
}

// MockUserServiceDeleteCall wrap *gomock.Call
type MockUserServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceDeleteCall) Return(arg0 error) *MockUserServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockUserServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockUserServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockUserService) First(ctx context.Context, params *models.User, preloads ...string) (*models.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockUserServiceMockRecorder) First(ctx, params any, preloads ...any) *MockUserServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockUserService)(nil).First), varargs...)
	return &MockUserServiceFirstCall{Call: call}
}

// MockUserServiceFirstCall wrap *gomock.Call
type MockUserServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceFirstCall) Return(arg0 *models.User, arg1 error) *MockUserServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceFirstCall) Do(f func(context.Context, *models.User, ...string) (*models.User, error)) *MockUserServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceFirstCall) DoAndReturn(f func(context.Context, *models.User, ...string) (*models.User, error)) *MockUserServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockUserService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockUserServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserService)(nil).GetByID), varargs...)
	return &MockUserServiceGetByIDCall{Call: call}
}

// MockUserServiceGetByIDCall wrap *gomock.Call
type MockUserServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetByIDCall) Return(arg0 *models.User, arg1 error) *MockUserServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.User, error)) *MockUserServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.User, error)) *MockUserServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserFollowersCount mocks base method.
func (m *MockUserService) GetUserFollowersCount(ctx context.Context, userID uuid.UUID) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowersCount", ctx, userID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetUserFollowersCount indicates an expected call of GetUserFollowersCount.
func (mr *MockUserServiceMockRecorder) GetUserFollowersCount(ctx, userID any) *MockUserServiceGetUserFollowersCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowersCount", reflect.TypeOf((*MockUserService)(nil).GetUserFollowersCount), ctx, userID)
	return &MockUserServiceGetUserFollowersCountCall{Call: call}
}

// MockUserServiceGetUserFollowersCountCall wrap *gomock.Call
type MockUserServiceGetUserFollowersCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserFollowersCountCall) Return(arg0 int64) *MockUserServiceGetUserFollowersCountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserFollowersCountCall) Do(f func(context.Context, uuid.UUID) int64) *MockUserServiceGetUserFollowersCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserFollowersCountCall) DoAndReturn(f func(context.Context, uuid.UUID) int64) *MockUserServiceGetUserFollowersCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUsers mocks base method.
func (m *MockUserService) GetUsers(ctx context.Context, page, limit int) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, page, limit)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServiceMockRecorder) GetUsers(ctx, page, limit any) *MockUserServiceGetUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserService)(nil).GetUsers), ctx, page, limit)
	return &MockUserServiceGetUsersCall{Call: call}
}

// MockUserServiceGetUsersCall wrap *gomock.Call
type MockUserServiceGetUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUsersCall) Return(arg0 []models.User, arg1 error) *MockUserServiceGetUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUsersCall) Do(f func(context.Context, int, int) ([]models.User, error)) *MockUserServiceGetUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUsersCall) DoAndReturn(f func(context.Context, int, int) ([]models.User, error)) *MockUserServiceGetUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockUserService) Last(ctx context.Context, params *models.User, preloads ...string) (*models.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockUserServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockUserServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockUserService)(nil).Last), varargs...)
	return &MockUserServiceLastCall{Call: call}
}

// MockUserServiceLastCall wrap *gomock.Call
type MockUserServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceLastCall) Return(arg0 *models.User, arg1 error) *MockUserServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceLastCall) Do(f func(context.Context, *models.User, ...string) (*models.User, error)) *MockUserServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceLastCall) DoAndReturn(f func(context.Context, *models.User, ...string) (*models.User, error)) *MockUserServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockUserService) Update(ctx context.Context, entity *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceMockRecorder) Update(ctx, entity any) *MockUserServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserService)(nil).Update), ctx, entity)
	return &MockUserServiceUpdateCall{Call: call}
}

// MockUserServiceUpdateCall wrap *gomock.Call
type MockUserServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateCall) Return(arg0 error) *MockUserServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateCall) Do(f func(context.Context, *models.User) error) *MockUserServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateCall) DoAndReturn(f func(context.Context, *models.User) error) *MockUserServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserPassword mocks base method.
func (m *MockUserService) UpdateUserPassword(email, hashedPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", email, hashedPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserServiceMockRecorder) UpdateUserPassword(email, hashedPassword any) *MockUserServiceUpdateUserPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserService)(nil).UpdateUserPassword), email, hashedPassword)
	return &MockUserServiceUpdateUserPasswordCall{Call: call}
}

// MockUserServiceUpdateUserPasswordCall wrap *gomock.Call
type MockUserServiceUpdateUserPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateUserPasswordCall) Return(arg0 error) *MockUserServiceUpdateUserPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateUserPasswordCall) Do(f func(string, string) error) *MockUserServiceUpdateUserPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateUserPasswordCall) DoAndReturn(f func(string, string) error) *MockUserServiceUpdateUserPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserPfp mocks base method.
func (m *MockUserService) UpdateUserPfp(ctx context.Context, pfpParams services.UpdatePfpParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPfp", ctx, pfpParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPfp indicates an expected call of UpdateUserPfp.
func (mr *MockUserServiceMockRecorder) UpdateUserPfp(ctx, pfpParams any) *MockUserServiceUpdateUserPfpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPfp", reflect.TypeOf((*MockUserService)(nil).UpdateUserPfp), ctx, pfpParams)
	return &MockUserServiceUpdateUserPfpCall{Call: call}
}

// MockUserServiceUpdateUserPfpCall wrap *gomock.Call
type MockUserServiceUpdateUserPfpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateUserPfpCall) Return(arg0 error) *MockUserServiceUpdateUserPfpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateUserPfpCall) Do(f func(context.Context, services.UpdatePfpParams) error) *MockUserServiceUpdateUserPfpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateUserPfpCall) DoAndReturn(f func(context.Context, services.UpdatePfpParams) error) *MockUserServiceUpdateUserPfpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockUserService) Where(ctx context.Context, params *models.User, opts ...query.Option) ([]models.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockUserServiceMockRecorder) Where(ctx, params any, opts ...any) *MockUserServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockUserService)(nil).Where), varargs...)
	return &MockUserServiceWhereCall{Call: call}
}

// MockUserServiceWhereCall wrap *gomock.Call
type MockUserServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceWhereCall) Return(arg0 []models.User, arg1 error) *MockUserServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceWhereCall) Do(f func(context.Context, *models.User, ...query.Option) ([]models.User, error)) *MockUserServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceWhereCall) DoAndReturn(f func(context.Context, *models.User, ...query.Option) ([]models.User, error)) *MockUserServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
