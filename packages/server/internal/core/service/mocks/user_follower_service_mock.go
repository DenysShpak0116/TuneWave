// Code generated by MockGen. DO NOT EDIT.
// Source: user_follower_service.go
//
// Generated by this command:
//
//	mockgen -source=user_follower_service.go -destination=../../service/mocks/user_follower_service_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/domain/models"
	query "github.com/DenysShpak0116/TuneWave/packages/server/internal/core/helpers/query"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserFollowerService is a mock of UserFollowerService interface.
type MockUserFollowerService struct {
	ctrl     *gomock.Controller
	recorder *MockUserFollowerServiceMockRecorder
	isgomock struct{}
}

// MockUserFollowerServiceMockRecorder is the mock recorder for MockUserFollowerService.
type MockUserFollowerServiceMockRecorder struct {
	mock *MockUserFollowerService
}

// NewMockUserFollowerService creates a new mock instance.
func NewMockUserFollowerService(ctrl *gomock.Controller) *MockUserFollowerService {
	mock := &MockUserFollowerService{ctrl: ctrl}
	mock.recorder = &MockUserFollowerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFollowerService) EXPECT() *MockUserFollowerServiceMockRecorder {
	return m.recorder
}

// CountWhere mocks base method.
func (m *MockUserFollowerService) CountWhere(ctx context.Context, params *models.UserFollower) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockUserFollowerServiceMockRecorder) CountWhere(ctx, params any) *MockUserFollowerServiceCountWhereCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockUserFollowerService)(nil).CountWhere), ctx, params)
	return &MockUserFollowerServiceCountWhereCall{Call: call}
}

// MockUserFollowerServiceCountWhereCall wrap *gomock.Call
type MockUserFollowerServiceCountWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFollowerServiceCountWhereCall) Return(arg0 int64, arg1 error) *MockUserFollowerServiceCountWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFollowerServiceCountWhereCall) Do(f func(context.Context, *models.UserFollower) (int64, error)) *MockUserFollowerServiceCountWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFollowerServiceCountWhereCall) DoAndReturn(f func(context.Context, *models.UserFollower) (int64, error)) *MockUserFollowerServiceCountWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockUserFollowerService) Create(ctx context.Context, entities ...*models.UserFollower) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserFollowerServiceMockRecorder) Create(ctx any, entities ...any) *MockUserFollowerServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, entities...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserFollowerService)(nil).Create), varargs...)
	return &MockUserFollowerServiceCreateCall{Call: call}
}

// MockUserFollowerServiceCreateCall wrap *gomock.Call
type MockUserFollowerServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFollowerServiceCreateCall) Return(arg0 error) *MockUserFollowerServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFollowerServiceCreateCall) Do(f func(context.Context, ...*models.UserFollower) error) *MockUserFollowerServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFollowerServiceCreateCall) DoAndReturn(f func(context.Context, ...*models.UserFollower) error) *MockUserFollowerServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockUserFollowerService) Delete(ctx context.Context, id ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserFollowerServiceMockRecorder) Delete(ctx any, id ...any) *MockUserFollowerServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserFollowerService)(nil).Delete), varargs...)
	return &MockUserFollowerServiceDeleteCall{Call: call}
}

// MockUserFollowerServiceDeleteCall wrap *gomock.Call
type MockUserFollowerServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFollowerServiceDeleteCall) Return(arg0 error) *MockUserFollowerServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFollowerServiceDeleteCall) Do(f func(context.Context, ...uuid.UUID) error) *MockUserFollowerServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFollowerServiceDeleteCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockUserFollowerServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// First mocks base method.
func (m *MockUserFollowerService) First(ctx context.Context, params *models.UserFollower, preloads ...string) (*models.UserFollower, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*models.UserFollower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockUserFollowerServiceMockRecorder) First(ctx, params any, preloads ...any) *MockUserFollowerServiceFirstCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockUserFollowerService)(nil).First), varargs...)
	return &MockUserFollowerServiceFirstCall{Call: call}
}

// MockUserFollowerServiceFirstCall wrap *gomock.Call
type MockUserFollowerServiceFirstCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFollowerServiceFirstCall) Return(arg0 *models.UserFollower, arg1 error) *MockUserFollowerServiceFirstCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFollowerServiceFirstCall) Do(f func(context.Context, *models.UserFollower, ...string) (*models.UserFollower, error)) *MockUserFollowerServiceFirstCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFollowerServiceFirstCall) DoAndReturn(f func(context.Context, *models.UserFollower, ...string) (*models.UserFollower, error)) *MockUserFollowerServiceFirstCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockUserFollowerService) GetByID(ctx context.Context, id uuid.UUID, preloads ...string) (*models.UserFollower, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*models.UserFollower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserFollowerServiceMockRecorder) GetByID(ctx, id any, preloads ...any) *MockUserFollowerServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserFollowerService)(nil).GetByID), varargs...)
	return &MockUserFollowerServiceGetByIDCall{Call: call}
}

// MockUserFollowerServiceGetByIDCall wrap *gomock.Call
type MockUserFollowerServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFollowerServiceGetByIDCall) Return(arg0 *models.UserFollower, arg1 error) *MockUserFollowerServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFollowerServiceGetByIDCall) Do(f func(context.Context, uuid.UUID, ...string) (*models.UserFollower, error)) *MockUserFollowerServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFollowerServiceGetByIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...string) (*models.UserFollower, error)) *MockUserFollowerServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockUserFollowerService) Last(ctx context.Context, params *models.UserFollower, preloads ...string) (*models.UserFollower, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*models.UserFollower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockUserFollowerServiceMockRecorder) Last(ctx, params any, preloads ...any) *MockUserFollowerServiceLastCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, preloads...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockUserFollowerService)(nil).Last), varargs...)
	return &MockUserFollowerServiceLastCall{Call: call}
}

// MockUserFollowerServiceLastCall wrap *gomock.Call
type MockUserFollowerServiceLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFollowerServiceLastCall) Return(arg0 *models.UserFollower, arg1 error) *MockUserFollowerServiceLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFollowerServiceLastCall) Do(f func(context.Context, *models.UserFollower, ...string) (*models.UserFollower, error)) *MockUserFollowerServiceLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFollowerServiceLastCall) DoAndReturn(f func(context.Context, *models.UserFollower, ...string) (*models.UserFollower, error)) *MockUserFollowerServiceLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockUserFollowerService) Update(ctx context.Context, entity *models.UserFollower) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserFollowerServiceMockRecorder) Update(ctx, entity any) *MockUserFollowerServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserFollowerService)(nil).Update), ctx, entity)
	return &MockUserFollowerServiceUpdateCall{Call: call}
}

// MockUserFollowerServiceUpdateCall wrap *gomock.Call
type MockUserFollowerServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFollowerServiceUpdateCall) Return(arg0 error) *MockUserFollowerServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFollowerServiceUpdateCall) Do(f func(context.Context, *models.UserFollower) error) *MockUserFollowerServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFollowerServiceUpdateCall) DoAndReturn(f func(context.Context, *models.UserFollower) error) *MockUserFollowerServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Where mocks base method.
func (m *MockUserFollowerService) Where(ctx context.Context, params *models.UserFollower, opts ...query.Option) ([]models.UserFollower, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].([]models.UserFollower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Where indicates an expected call of Where.
func (mr *MockUserFollowerServiceMockRecorder) Where(ctx, params any, opts ...any) *MockUserFollowerServiceWhereCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockUserFollowerService)(nil).Where), varargs...)
	return &MockUserFollowerServiceWhereCall{Call: call}
}

// MockUserFollowerServiceWhereCall wrap *gomock.Call
type MockUserFollowerServiceWhereCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFollowerServiceWhereCall) Return(arg0 []models.UserFollower, arg1 error) *MockUserFollowerServiceWhereCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFollowerServiceWhereCall) Do(f func(context.Context, *models.UserFollower, ...query.Option) ([]models.UserFollower, error)) *MockUserFollowerServiceWhereCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFollowerServiceWhereCall) DoAndReturn(f func(context.Context, *models.UserFollower, ...query.Option) ([]models.UserFollower, error)) *MockUserFollowerServiceWhereCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
